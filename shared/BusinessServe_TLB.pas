unit BusinessServe_TLB;

// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// PASTLWTR : 1.2
// File generated on 2009-06-11 14:49:41 from Type Library described below.

// ************************************************************************  //
// Type Lib: E:\project\VSMSsystemV1.0\AppServer\kernel\BusinessServe.tlb (1)
// LIBID: {0B853B44-50C2-4CB7-B6D2-DE2B2DBFFFDC}
// LCID: 0
// Helpfile: 
// HelpString: BusinessServe Library
// DepndLst: 
//   (1) v1.0 Midas, (C:\WINDOWS\system32\midas.dll)
//   (2) v2.0 stdole, (C:\WINDOWS\system32\stdole2.tlb)
// ************************************************************************ //
{$TYPEDADDRESS OFF} // Unit must be compiled without type-checked pointers. 
{$WARN SYMBOL_PLATFORM OFF}
{$WRITEABLECONST ON}
{$VARPROPSETTER ON}
interface

uses Windows, ActiveX, Classes, Graphics, Midas, StdVCL, Variants;
  

// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLASS_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
const
  // TypeLibrary Major and minor versions
  BusinessServeMajorVersion = 1;
  BusinessServeMinorVersion = 0;

  LIBID_BusinessServe: TGUID = '{0B853B44-50C2-4CB7-B6D2-DE2B2DBFFFDC}';

  IID_IBusiness: TGUID = '{B09F1FA7-6052-4E07-BF72-8B049F22B640}';
  CLASS_Business: TGUID = '{09A792D0-C480-46D7-82E6-4FBABA5B21EB}';
type

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
  IBusiness = interface;
  IBusinessDisp = dispinterface;

// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
// *********************************************************************//
  Business = IBusiness;


// *********************************************************************//
// Interface: IBusiness
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B09F1FA7-6052-4E07-BF72-8B049F22B640}
// *********************************************************************//
  IBusiness = interface(IAppServer)
    ['{B09F1FA7-6052-4E07-BF72-8B049F22B640}']
    function QueryUserList: OleVariant; safecall;
    function AddNewUser(const AUserName: WideString; const APassword: WideString; AUserRole: Integer): OleVariant; safecall;
    procedure DeleteUser(AUserID: Integer); safecall;
    procedure ModifyUser(AUserID: Integer; const AUserName: WideString; 
                         const AUserPass: WideString; AUserRole: Integer; AUserStat: Integer); safecall;
    function QueryRoleList: OleVariant; safecall;
    function AddNewRole(const ARoleName: WideString; const ARoleDesc: WideString): OleVariant; safecall;
    procedure ModifyRole(ARoleID: Integer; const ARoleName: WideString; const ARoleDesc: WideString); safecall;
    procedure DeleteRole(ARoleID: Integer); safecall;
    procedure ModifyRolePrivilege(ARoleID: Integer; APrivilegeList: OleVariant; 
                                  APrivilegeVisible: OleVariant; APrivlegeEnabled: OleVariant); safecall;
    function QueryUserGroupList(AUserID: Integer): OleVariant; safecall;
    procedure ModifyUserGroupList(AUserID: Integer; AGroupList: OleVariant); safecall;
    function QueryDevList: OleVariant; safecall;
    procedure AddNewDev(const ADevID: WideString; AConntype: Integer; AGroup: Integer; 
                        ACarID: Integer; const ADispLabel: WideString; const ASimNo: WideString; 
                        const ADisPlay: WideString; AManuID: Integer); safecall;
    procedure DeleteDev(const ADevID: WideString); safecall;
    procedure ModifyDev(const ADevID: WideString; AConntype: Integer; AGroup: Integer; 
                        ACarID: Integer; const ADispLabel: WideString; const ASimNo: WideString; 
                        AManuID: Integer; const ADisPlay: WideString); safecall;
    function QueryCarList: OleVariant; safecall;
    function AddNewCar(const ACarNo: WideString; const ACarMemo: WideString; AResID: Integer; 
                       ACarTypeID: Integer): OleVariant; safecall;
    procedure DeleteCar(ACarID: Integer); safecall;
    procedure ModifyCar(ACarID: Integer; const ACarNo: WideString; const ACarMemo: WideString; 
                        AResID: Integer; ACarTypeID: Integer); safecall;
    function QueryGroupList: OleVariant; safecall;
    function AddNewGroup(const AGroupName: WideString; AParent: Integer; ALeafNode: Byte; 
                         const AGroupAddr: WideString; const AGroupTel: WideString; 
                         const AGroupCorpo: WideString): OleVariant; safecall;
    procedure DeleteGroup(AGroupID: Integer); safecall;
    procedure ModifyGroup(AGroupID: Integer; const AGroupName: WideString; AParent: Integer; 
                          ALeafNode: Byte; const AGroupAddr: WideString; 
                          const AGroupTel: WideString; const ACorpor: WideString); safecall;
    function QueryConntypeList: OleVariant; safecall;
    function AddNewConntype(const AConntypename: WideString; const AConntypeDesc: WideString): OleVariant; safecall;
    procedure DeleteConntype(AConntypeID: Integer); safecall;
    procedure ModifyConntype(AConntypeID: Integer; const AConntypename: WideString; 
                             const AConntypeDesc: WideString); safecall;
    function QuerySwitchList: OleVariant; safecall;
    function AddNewSwitch(AImgID: Integer; AConntypeID: Integer; const ASwitchName: WideString; 
                          ASwitchOrder: Integer): OleVariant; safecall;
    procedure DeleteSwitch(ASwitchID: Integer); safecall;
    procedure ModifySwitch(ASwitchID: Integer; AImgID: Integer; AConntypeID: Integer; 
                           ASwitchOrder: Integer; const ASwitchName: WideString); safecall;
    function QueryResList: OleVariant; safecall;
    function UploadNewRes(const AResName: WideString; const AResExtType: WideString; 
                          AResContent: OleVariant): OleVariant; safecall;
    procedure DeleteRes(AResID: Integer); safecall;
    procedure ModifyRes(AResID: Integer; const AResName: WideString; const AResExtType: WideString; 
                        AResContent: OleVariant); safecall;
    function DownLoadRes(AResID: Integer): OleVariant; safecall;
    function DownAllRes: OleVariant; safecall;
    procedure UploadConfigFile(const AConfigFileContent: WideString); safecall;
    function QueryUser(AUserID: Integer): OleVariant; safecall;
    function QueryRole(ARoleID: Integer): OleVariant; safecall;
    function QueryRolePrivilege(ARoleID: Integer): OleVariant; safecall;
    function QueryDev(const ADevID: WideString): OleVariant; safecall;
    function QueryCar(ACarID: Integer): OleVariant; safecall;
    function QueryDevByList(ADevList: OleVariant): OleVariant; safecall;
    function QueryCarByList(ACarList: OleVariant): OleVariant; safecall;
    function DownResList(AResList: OleVariant): OleVariant; safecall;
    function Login(const AUserName: WideString; const AUserPass: WideString; AnAddParam: Integer): OleVariant; safecall;
    procedure Logout(AUserID: Integer); safecall;
    function GW_CheckUser(AUserID: Integer; const AUserPass: WideString): OleVariant; safecall;
    function GW_RefreshDevUser(var ALocalTimeStamp: OleVariant; out ADevUserDynAry: OleVariant): OleVariant; safecall;
    procedure GW_DevRegLog(ADevID: Integer; AnAction: Integer; ATime: Double); safecall;
    procedure GW_WriteLog(AnActoID: Integer; const AnDevID: WideString; AnActionType: Integer; 
                          const AnActionDesc: WideString); safecall;
    procedure ChangePassword(AUserID: Integer; const AnOldPass: WideString; 
                             const AnNewPass: WideString); safecall;
    function RequestConfigParam: OleVariant; safecall;
    function QueryHistoryCount(ADevID: Integer; AFromTime: TDateTime; AToTime: TDateTime): OleVariant; safecall;
    function QueryHistory(ADevID: Integer; AFromTime: TDateTime; AToTime: TDateTime; 
                          AStartIndex: Integer; AGetCount: Integer; out AGpsData: OleVariant): OleVariant; safecall;
    function AddNewMessage(AMsgType: Integer; const ADevID: WideString; 
                           const AMsgContent: WideString): OleVariant; safecall;
    procedure GW_SetMsgState(AMsgID: Integer; AMsgState: Integer; const AMsgMemo: WideString); safecall;
    function QueryMsgList(ADevList: OleVariant; AFromTime: TDateTime; AToTime: TDateTime): OleVariant; safecall;
    function QueryMsgListEx(ADevList: OleVariant; AFromTime: TDateTime; AToTime: TDateTime; 
                            AMsgState: Integer): OleVariant; safecall;
    function QueryDevCntByGrpId(AGroupID: Integer): OleVariant; safecall;
    function SMS_QueryDevList: OleVariant; safecall;
    function SMS_RefreshDevIDSIM(var ALocalTimeStamp: OleVariant; out ADevIDSIMDynAry: OleVariant): OleVariant; safecall;
    procedure AddNewSmsInfo(ASmsID: Integer; const ASmsNo: WideString; ASmsType: Integer; 
                            const ASmsMemo: WideString); safecall;
    procedure ModifySmsInfo(ASmsID: Integer; const ASmsNo: WideString; ASmsType: Integer; 
                            const ASmsMemo: WideString); safecall;
    procedure DeleteSmsInfo(ASmsID: Integer); safecall;
    function QuerySmsInfoList: OleVariant; safecall;
    procedure ModifySmsGroupList(ASmsID: Integer; AGroupList: OleVariant; ASmsType: Integer); safecall;
    function QuerySmsInfoGroupList(ASmsID: Integer): OleVariant; safecall;
    function QuerySmsDevList(const sim_no: WideString): OleVariant; safecall;
    procedure UpdateDevParam(ADevID: Integer; const ADomainName: WideString; 
                             const AIpAddress: WideString; APort: Integer; 
                             const ASMSCenter: WideString; AReturnInterval: Integer; 
                             AReturnCount: Integer; AAlaramInterval: Integer; 
                             AAlaramReSendCount: Integer; ABound: Integer; AIostat: Integer; 
                             AExternalEnable: Integer; const AApn: WideString; 
                             const AListentel: WideString; const AWorktel: WideString; 
                             const AKeytel1: WideString; const AKeytel2: WideString; 
                             const AKeytel3: WideString; const AKeytel4: WideString); safecall;
    function QueryDevParam(ADevID: Integer): OleVariant; safecall;
    function QueryDevParamList: OleVariant; safecall;
    function Sms_RefreshDevSMSServer(var ALocalTimeStamp: OleVariant; const ASMS_SimNo: WideString; 
                                     out ADevSMSServerAry: OleVariant): OleVariant; safecall;
    function AddNewCarType(const ATypeName: WideString): OleVariant; safecall;
    procedure ModifyCarType(ACarTypeID: Integer; const ACarTypeName: WideString); safecall;
    procedure DeleteCarType(ATypeID: Integer); safecall;
    function QueryCarType: OleVariant; safecall;
    function AddNewDriver(const ADriverName: WideString; const ADriverTel: WideString; 
                          const ADriverAddr: WideString; const ADriverCard: WideString; 
                          ADriverPhot: OleVariant; ACarID: Integer; AGroupID: Integer; 
                          const ADriverNo: WideString; ADriverKind: Integer): OleVariant; safecall;
    procedure ModifyDriver(ADriverID: Integer; const ADriverName: WideString; 
                           const ADriverTel: WideString; const ADriverAddr: WideString; 
                           const ADriverCard: WideString; ADriverPhoto: OleVariant; 
                           ACarID: Integer; AGroupID: Integer; const ADriverNo: WideString; 
                           ADriverKind: Integer); safecall;
    function AddNewDisplayTel(const ATelNo: WideString; ATelType: Integer; const DevID: WideString; 
                              const ATelName: WideString): OleVariant; safecall;
    procedure DeleteDisplayTel(ATelID: Integer); safecall;
    function QueryDisplayTelList: OleVariant; safecall;
    procedure ModifyDisplayTel(ATelID: Integer; const ADevID: WideString; const ATelNo: WideString; 
                               const ATelName: WideString; ATelType: Integer); safecall;
    procedure AddNewDisplayMenu(AMenuID: Integer; AParent: Integer; ALeafNode: Byte; 
                                const ADevID: WideString; const AName: WideString); safecall;
    procedure ModifyDisplayMenu(AMenuID: Integer; AParent: Integer; ALeafNod: Byte; 
                                const AMemo: WideString; const ADevID: WideString); safecall;
    function QueryDisplayMenuList: OleVariant; safecall;
    function AddNewTaxiMeta(ACarID: Integer; AManuID: Integer; const ATaxiMetaNo: WideString; 
                            const AStopDate: WideString; const AInstallDate: WideString): OleVariant; safecall;
    procedure ModifyTaxiMeta(ATaxiMetaId: Integer; ACarID: Integer; AManuID: Integer; 
                             const ATaxiMetaNo: WideString; const AStopDate: WideString; 
                             const AInstallDate: WideString); safecall;
    function QueryTaxiMetaList: OleVariant; safecall;
    procedure DeleteTaxiMeta(ATaxiMetaId: Integer); safecall;
    function AddNewDevManufact(const ADevManufact_Name: WideString; 
                               const ADevManufact_No: WideString): OleVariant; safecall;
    procedure ModifyDevManufact(ADevManufact_ID: Integer; const ADevManufact_Name: WideString; 
                                const ADevManufact_No: WideString); safecall;
    function QueryDevManufactList: OleVariant; safecall;
    procedure DeleteDevManufact(ADevManufact_ID: Integer); safecall;
    function QueryTaxiMeta(ATaxiMetaId: Integer): OleVariant; safecall;
    function QueryDevManufact(ADevManufact_ID: Integer): OleVariant; safecall;
    procedure DeleteDevDisplayMenus(const ADev_Id: WideString); safecall;
    procedure DeleteDevDisplayMenu(const ADev_Id: WideString; ADisplayMenu_Id: Integer); safecall;
    procedure DeleteDevDisplayTels(const ADevID: WideString); safecall;
    function QueryDriverList: OleVariant; safecall;
    procedure DeleteDriver(ADriver_ID: Integer); safecall;
    procedure ModifyDevDisplayName(const ADevID: WideString; const ADevDisplayName: WideString); safecall;
    function QueryRolePrivilegeList: OleVariant; safecall;
    function AddNewParam(AparamNo: Integer; const AParamMemo: WideString; const ADevID: WideString): OleVariant; safecall;
    procedure ModifyParam(AParamID: Integer; AparamNo: Integer; const ADevID: WideString; 
                          const AParamMemo: WideString); safecall;
    procedure DeleteParamByDevID(const ADevID: WideString); safecall;
    function QueryParamByDevID(const ADevID: WideString): OleVariant; safecall;
    function QueryPrivilegeList: OleVariant; safecall;
    procedure DeleteParamByNoDevID(AparamNo: Integer; const ADevID: WideString); safecall;
    function QueryRunDataByCarDate(const ACar_NO: WideString; const ARide_Date1: WideString; 
                                   const ARide_Date2: WideString): OleVariant; safecall;
    function QueryRunDataCount(const ACarNo: WideString; const ADate: WideString; 
                               const AToDate: WideString): OleVariant; safecall;
    function QueryRunData(const ACarNo: WideString; const AFromDate: WideString; 
                          const AToDate: WideString; AStartIndex: Integer; AGetCount: Integer; 
                          out ARunData: OleVariant): OleVariant; safecall;
    procedure ModifyUserPass(AUserID: Integer; const AUserPass: WideString; 
                             const AnewPass: WideString); safecall;
    function AddNewOrders(AType: OleVariant; ADate: TDateTime; const AContent: WideString; 
                          const AUserTel: WideString; const APartContent: WideString; 
                          ASendDate: TDateTime; ADevIDAry: OleVariant): OleVariant; safecall;
    function QueryOrders(AType: OleVariant; AFromDate: TDateTime; AToDate: TDateTime; 
                         const ACustomTel: WideString; ADevID: Integer; AUserID: Integer): OleVariant; safecall;
    procedure ModifyOrders(AOrderID: Integer; ADevID: Integer; AResult: OleVariant; 
                           const AMemo: WideString; ACancelTime: TDateTime; ASecuTime: TDateTime; 
                           DevCancelReasonID: Integer); safecall;
    function QueryOrderByID(AOrderID: Integer): OleVariant; safecall;
    function QueryAllDev: OleVariant; safecall;
    function AddCancelOrderReason(AMenuID: OleVariant; const ADev_Id: WideString; 
                                  const aReason: WideString): OleVariant; safecall;
    procedure DelCancelOrderReason(const ADevID: WideString); safecall;
    function QueryCancelMenuByDev(const ADevID: WideString): OleVariant; safecall;
    function GetTime: OleVariant; safecall;
    function QueryMessage(AMsgID: Integer): OleVariant; safecall;
    function StatRunDatabyDate(ACarNoAry: OleVariant; const AFromDate: WideString; 
                               const AToDate: WideString): OleVariant; safecall;
    procedure AddNewDkc(const carNo: WideString; const onDate: WideString; 
                        const onTime: WideString; const offTime: WideString; 
                        const waitTime: WideString; xslc: Double; yyje: Double; kslc: Double; 
                        const DevID: WideString); safecall;
    function AddUser(const AUserName: WideString; const APassword: WideString; AUserRole: Integer; 
                     const AMemo: WideString): OleVariant; safecall;
    procedure UpdateUser(AUserID: Integer; const AUserName: WideString; 
                         const AUserPass: WideString; AUserRole: Integer; AUserStat: Integer; 
                         const AMemo: WideString); safecall;
    function QueryParamByDevIDs(const ADevIDs: WideString): OleVariant; safecall;
    function QueryParams: OleVariant; safecall;
    function QueryCancelMenu: OleVariant; safecall;
    function QueryDriverTimes(const DriverNo: WideString; start_Time: TDateTime; 
                              end_Time: TDateTime; const DevID: WideString; AGrpId: Integer): OleVariant; safecall;
    function QueryOperationDriverCards(const DriverNo: WideString; start_Time: TDateTime; 
                                       end_Time: TDateTime): OleVariant; safecall;
    function AddNewOperationDriverCard(const DriverNo: WideString): OleVariant; safecall;
    function QueryDriverForClient: OleVariant; safecall;
    function AddCar(const ACarNo: WideString; const ACarMemo: WideString; AResID: Integer; 
                    ACarTypeID: Integer; const ACarPass: WideString): OleVariant; safecall;
    procedure updateCar(ACarID: Integer; const ACarNo: WideString; const ACarMemo: WideString; 
                        AResID: Integer; ACarTypeID: Integer; const ACarPass: WideString); safecall;
    function StatRunDataByMonth(ACarNo: OleVariant; AFromDate: TDateTime; AToDate: TDateTime): OleVariant; safecall;
    function StatTaxiDataByDate(ACarNo: OleVariant; AFromDate: TDateTime; AToDate: TDateTime): OleVariant; safecall;
    function QueryHistoryNew(ADevID: Integer; AFromTime: TDateTime; AToTime: TDateTime; 
                             AStartIndex: Integer; AGetCount: Integer; out AGpsData: OleVariant): OleVariant; safecall;
    function QueryHistoryCountNew(ADevID: Integer; AFromTime: TDateTime; AToTime: TDateTime): OleVariant; safecall;
    function QueryCancelMenuByDev_Zb(const ADevID: WideString): OleVariant; safecall;
    function AddCancelOrderReason_Zb(AMenuID: OleVariant; const ADevID: WideString): OleVariant; safecall;
    procedure DelCancelOrderReason_Zb(const ADevID: WideString); safecall;
    function AddCancelReason(const aReason: WideString): OleVariant; safecall;
    procedure ModifyCancelReason(AReasonID: Integer; const aReason: WideString); safecall;
    procedure DelCancelReason(AReasonID: Integer); safecall;
    function QueryCancelReason: OleVariant; safecall;
    function QueryCancelMenu_Zb: OleVariant; safecall;
    function AddNewDevOrder(DevID: Integer; OrderId: Integer; stat: Integer): OleVariant; safecall;
    procedure DeleteCallCenterOrder(AOrderID: Integer); safecall;
    procedure DeleteDevOrder(ADevID: Integer; AOrderID: Integer); safecall;
    function QueryCallcenterOrder: OleVariant; safecall;
    function QueryDevOrder(ADevID: Integer): OleVariant; safecall;
    procedure AddNewCallCenterOrder(aCmdID: Integer; AOrderID: Integer; const name: WideString; 
                                    sex: Integer; const tel: WideString; needCars: Integer; 
                                    const address: WideString; const detailAddress: WideString; 
                                    onDate: TDateTime; orderType: Integer; orderRadius: Integer); safecall;
    function QueryCarCarryed(const devIdAny: WideString; beginTime: TDateTime; endTime: TDateTime): OleVariant; safecall;
    function CarryedStat(devIdArryay: OleVariant; beginTime: TDateTime; endTime: TDateTime): OleVariant; safecall;
    function QueryPhotoByDevAndPicIndex(ADevID: Integer; APicIndex: Integer): OleVariant; safecall;
    function QueryPhotosByDevID(ADevID: Integer; ABeginTime: TDateTime; AEndTime: TDateTime): OleVariant; safecall;
    function GetOrderID: OleVariant; safecall;
    procedure ModiyfyNewOrder(BespeakDateTime: TDateTime; CurstomerId: Integer; 
                              const address: WideString; const detailAddress: WideString; 
                              orderType: Integer; needCars: Integer; CustomerNum: Integer; 
                              UserId: Integer; const Memo: WideString; const tbName: WideString; 
                              OrderId: Integer; const telPhone: WideString; RECORD_ID: Integer); safecall;
    procedure ModifyOrderStat(const tbName: WideString; OrderId: Integer; stat: Integer); safecall;
    function AddNewCustomer(const CustomerName: WideString; const detailAddress: WideString; 
                            gender: Integer; const telPhone: WideString; OrderNums: Integer; 
                            RoadID: Integer; SmallAddressID: Integer; const Memo: WideString): OleVariant; safecall;
    function GetCustomerByTel(const telPhone: WideString): OleVariant; safecall;
    procedure AddNewOrderDownCars(OrderId: Integer; DevID: Integer; orderTime: TDateTime); safecall;
    procedure AddNewGrabOkCars(OrderId: Integer; DevID: Integer; orderTime: TDateTime); safecall;
    procedure AddNewHaveGrabedCars(OrderId: Integer; DevID: Integer; orderTime: TDateTime); safecall;
    function QueryCarHitchList(const devIdAny: WideString; beginTime: TDateTime; endTime: TDateTime): OleVariant; safecall;
    function HitchStat(devIdArryay: OleVariant; beginTime: TDateTime; endTime: TDateTime): OleVariant; safecall;
    function CarMusterCancelStatistics(beginTime: TDateTime; endTime: TDateTime): OleVariant; safecall;
    function CarMusterOkStatistics(beginTime: TDateTime; endTime: TDateTime): OleVariant; safecall;
    function CarMusterStatistics(beginTime: TDateTime; endTime: TDateTime): OleVariant; safecall;
    function GetNextAccuseID: OleVariant; safecall;
    procedure AddNewAccuseLog(const ACCUSE_LOG_ID: WideString; ACCUSE_TYPE: Integer; 
                              ACCUSE_TIME: TDateTime; const ACCUSE_TELEPHONE: WideString; 
                              const ACCUSE_CONTENT: WideString; const Car_No: WideString; 
                              const CUSTOMER_NAME: WideString; const CUSTOMER_ADDRESS: WideString; 
                              const CUSTOMER_TELEPHONE: WideString; 
                              const CUSTOMER_MEMO: WideString; CASE_HAPPEN_TIME: TDateTime; 
                              const CASE_ADDRESS: WideString; const TICKET_NO: WideString; 
                              const CHECK_RESULT: WideString; const DEAL_DEPARTMENT: WideString; 
                              const DEAL_MAN: WideString; const DEAL_MAN_TELE: WideString; 
                              const DEAL_RESULT: WideString; DEAL_TIME: TDateTime; 
                              DEAL_STATE: Integer; RECORD_ID: Integer; gender: Integer); safecall;
    procedure UpdateAccuseLog(const ACCUSE_LOG_ID: WideString; ACCUSE_TYPE: Integer; 
                              ACCUSE_TIME: TDateTime; CurstomerId: Integer; Car_Id: Integer; 
                              CASE_HAPPEN_TIME: TDateTime; const CASE_ADDRESS: WideString; 
                              const TICKET_NO: WideString; const CHECK_RESULT: WideString; 
                              const DEAL_DEPARTMENT: WideString; const DEAL_MAN: WideString; 
                              const DEAL_MAN_TELE: WideString; const DEAL_RESULT: WideString; 
                              DEAL_TIME: TDateTime; DEAL_STATE: Integer; RECORD_ID: Integer; 
                              const ACCUSE_CONTENT: WideString); safecall;
    function AddCenterCancelOrderReason(const ReasonName: WideString; const Memo: WideString): OleVariant; safecall;
    procedure UpdateCenterCancelOrderReason(ARID: Integer; const ReasonName: WideString; 
                                            const Memo: WideString); safecall;
    procedure DeleteCenterCancelOrderReason(ARID: Integer); safecall;
    function QueryCenterCancelOrderReason: OleVariant; safecall;
    function GetDealDepartment: OleVariant; safecall;
    function GetDealMan: OleVariant; safecall;
    function GetFirstAccuseLog: OleVariant; safecall;
    function GetLastAccuseLog: OleVariant; safecall;
    function GetNextAccuseLog(const ALogID: WideString): OleVariant; safecall;
    function GetPriorAccuseLog(const ALogID: WideString): OleVariant; safecall;
    function QueryAccuseList(beginTime: TDateTime; endTime: TDateTime): OleVariant; safecall;
    function QueryOrderList(const telPhone: WideString; beginTime: TDateTime; endTime: TDateTime; 
                            stat: Integer): OleVariant; safecall;
    function AddnewCallInt(CALLIN_START_TIME: TDateTime; CALLIN_END_TIME: TDateTime; 
                           CALLIN_EXT_CHANNEL: Integer; CALLIN_USER_CHANNEL: Integer; 
                           const CALLIN_RECORD_FILE: WideString; const CALLIN_TELEPHONE: WideString): OleVariant; safecall;
    procedure DeleteCallInt(ACallinLogId: Integer); safecall;
    function QueryCallIntById(ACallinLogId: Integer): OleVariant; safecall;
    function AddNewCallInLog(CALLIN_START_TIME: TDateTime; CALLIN_END_TIME: TDateTime; 
                             CALLIN_EXT_CHANNEL: Integer; CALLIN_USER_CHANNEL: Integer; 
                             const CALLIN_RECORD_FILE: WideString; 
                             const CALLIN_TELEPHONE: WideString): OleVariant; safecall;
    procedure DeleteCallInLog(ACallinLogId: Integer); safecall;
    function QueryCallInLogById(ACallinLogId: Integer): OleVariant; safecall;
    procedure UpdateCallInLogEndTime(CallInLogId: Integer; CALLIN_END_TIME: TDateTime); safecall;
    procedure UpdateCallInLog(CallInLogId: Integer; CallinUserChannel: Integer; 
                              const CallinRecordFile: WideString); safecall;
    function QueryRoadList: OleVariant; safecall;
    function QueryRoadBuilding: OleVariant; safecall;
    function QueryRoadBuildingByRoadId(ARoadID: Integer): OleVariant; safecall;
    function StatisticTelNumsByUsers(beginTime: TDateTime; endTime: TDateTime): OleVariant; safecall;
    function getMonthStaticsTelNums(beginTime: TDateTime; endTime: TDateTime): OleVariant; safecall;
    function DevGrabOrderStatics(beginTime: TDateTime; endTime: TDateTime): OleVariant; safecall;
    procedure ModifyGrabOkOrderStat(OrderId: Integer; DevID: Integer; stat: Integer; 
                                    orderTime: TDateTime; RasonID: Integer); safecall;
    function AddNewOrder(BespeakDateTime: TDateTime; CurstomerId: Integer; 
                         const telPhone: WideString; const address: WideString; 
                         const detailAddress: WideString; orderType: Integer; needCars: Integer; 
                         CustomerNum: Integer; UserId: Integer; const Memo: WideString; 
                         RecordId: Integer; IsChange: Integer): OleVariant; safecall;
    procedure AddNewChaseCarRecord(const DevID: WideString; ChaseTime: TDateTime; OrderId: Integer; 
                                   AUserID: Integer; const telPhone: WideString); safecall;
    function CallClient_Login(const AUserName: WideString; const AUserPass: WideString; 
                              AnAddParam: Integer): OleVariant; safecall;
    procedure ModifyCallInLogStat(CALLIN_LOG_ID: Integer; stat: Integer); safecall;
    function StatisticCallInByUsers(beginTime: TDateTime; endTime: TDateTime): OleVariant; safecall;
    function QueryGroupIds: OleVariant; safecall;
    procedure ModifyGroupIds(groupIds: OleVariant); safecall;
    function CallClient_QueryDevList: OleVariant; safecall;
    function CallClient_CarList: OleVariant; safecall;
    function QueryChaseCarRecords(beginTime: TDateTime; endTime: TDateTime): OleVariant; safecall;
    function CallinStatics(const beginTime: WideString; const endTime: WideString): OleVariant; safecall;
    function ChaseCarStatics(const beginTime: WideString; const endTime: WideString): OleVariant; safecall;
    function CarChasedStatics(begTime: TDateTime; endTime: TDateTime): OleVariant; safecall;
    function AccuseStatics(const beginTime: WideString; const endTime: WideString): OleVariant; safecall;
    function AddNew_AccuseLog(const ACCUSE_LOG_ID: WideString; ACCUSE_TYPE: Integer; 
                              ACCUSE_TIME: TDateTime; CurstomerId: Integer; Car_Id: Integer; 
                              CASE_HAPPEN_TIME: TDateTime; const CASE_ADDRESS: WideString; 
                              const TICKET_NO: WideString; const CHECK_RESULT: WideString; 
                              const DEAL_DEPARTMENT: WideString; const DEAL_MAN: WideString; 
                              const DEAL_MAN_TELE: WideString; const DEAL_RESULT: WideString; 
                              DEAL_TIME: TDateTime; DEAL_STATE: Integer; RECORD_ID: Integer; 
                              UserId: Integer; const ACCUSE_CONTENT: WideString): OleVariant; safecall;
    function QueryCallIn_Log(beginTime: TDateTime; endTime: TDateTime): OleVariant; safecall;
    function QueryOrderByOrderId(OrderId: Integer): OleVariant; safecall;
    function QueryCustomerById(AId: Integer): OleVariant; safecall;
    function QueryOkOrderByDevId(const AId: WideString): OleVariant; safecall;
    function QueryGrabOrderByOrderId(AOrderID: Integer): OleVariant; safecall;
    function QueryGrabOkOrderByOrderId(AId: Integer): OleVariant; safecall;
    function QueryOrderDownCars(AOrderID: Integer): OleVariant; safecall;
    procedure AddNewChangeOrder(oldOrderId: Integer; oldOrderTime: TDateTime; newOrderId: Integer; 
                                newOrderTime: TDateTime; CallCenterReasonId: Integer; 
                                DriverReasonId: Integer); safecall;
    function QueryNoDealOrder: OleVariant; safecall;
    function QueryCancelMenuByCancelId(AId: Integer): OleVariant; safecall;
    procedure UpdateCallInStat(ACallinLogId: Integer; AStat: Integer); safecall;
    procedure AddNewCustomerCancelOrders(const telPhone: WideString; CustomerId: Integer; 
                                         OrderId: Integer; const Memo: WideString); safecall;
    function QueryCustomerCancelOrderList(beginTime: TDateTime; endTime: TDateTime): OleVariant; safecall;
    function QueryCustomer: OleVariant; safecall;
    function QueryOldOrderIDByNewOrderId(ANewOrderId: Integer): OleVariant; safecall;
    function QueryCmdLogs(ABEXEC_TIME: TDateTime; AEEXEC_TIME: TDateTime): OleVariant; safecall;
    function AddNewAdInfo(const adMemo: WideString; beginTime: TDateTime; endTime: TDateTime; 
                          const CustomerName: WideString; const linkName: WideString; 
                          const tel: WideString; const Memo: WideString): OleVariant; safecall;
    procedure ModifyAdInfo(AId: Integer; const adMemo: WideString; beginTime: TDateTime; 
                           endTime: TDateTime; const CustomerName: WideString; 
                           const linkName: WideString; const tel: WideString; const Memo: WideString); safecall;
    procedure DeleteAdInfo(AId: Integer); safecall;
    function QueryAdInfo: OleVariant; safecall;
    function AddNewDevAd(const DevID: WideString; AdId: Integer): OleVariant; safecall;
    function QueryAdByGroupId(AGroupID: Integer): OleVariant; safecall;
    function QueryAdInfoOverTime(ADays: Integer): OleVariant; safecall;
    function AddNewBeforeScreen(const bsMemo: WideString): OleVariant; safecall;
    procedure ModifyBeforeScreen(AId: Integer; const bfMemo: WideString); safecall;
    procedure DeleteBeforeScreen(AId: Integer); safecall;
    function QueryBeforeScreen: OleVariant; safecall;
    function AddBsByDev(bsId: Integer; const DevID: WideString): OleVariant; safecall;
    procedure DeleteBsByDev(ABsId: Integer; const ADevID: WideString); safecall;
    function QueryBsByDev(const ADevID: WideString): OleVariant; safecall;
    procedure DeleteAdByDevIdADID(const DevID: WideString; AId: Integer); safecall;
    procedure DeleteADByDev(const DevID: WideString); safecall;
    function QueryADByDevId(const ADevID: WideString): OleVariant; safecall;
    function QueryDevByADId(AdId: Integer): OleVariant; safecall;
    function AddNewStationType(const AStationType: WideString): OleVariant; safecall;
    procedure DeleteStationType(AId: Integer); safecall;
    procedure ModifyStationType(AId: Integer; const AStationType: WideString); safecall;
    function QueryStationType: OleVariant; safecall;
    function AddStationInfo(const ASationName: WideString; const AMemo: WideString): OleVariant; safecall;
    procedure DeleteStation(AId: Integer); safecall;
    procedure ModifyStation(AId: Integer; const AStationName: WideString; const AMemo: WideString); safecall;
    function QueryStation: OleVariant; safecall;
    function AddInStaticon(StationId: Integer; PlatType_Id: Integer; PLATDirect: Integer; 
                           InStationDistance: Integer; OutStationDistance: Integer; 
                           INGPSLanti: Double; INGPSLongi: Double; OUTGPSLanti: Double; 
                           OUTGPSLongi: Double; const InSoundInfo: WideString; 
                           const OutSoundInfo: WideString; const DSound: WideString; 
                           const Memo: WideString; const StationBrank: WideString): OleVariant; safecall;
    procedure ModifyInStation(AId: Integer; StationId: Integer; PlatType_Id: Integer; 
                              PLATDirect: Integer; InStationDistance: Integer; 
                              OutStationDistance: Integer; INGPSLanti: Double; INGPSLongi: Double; 
                              OUTGPSLanti: Double; OUTGPSLongi: Double; 
                              const InSoundInfo: WideString; const OutSoundInfo: WideString; 
                              const DSound: WideString; const Memo: WideString; 
                              const StationBrank: WideString); safecall;
    procedure DeleteInStation(AId: Integer); safecall;
    function QueryInStation: OleVariant; safecall;
    function AddLine(const LineName: WideString; const Memo: WideString): OleVariant; safecall;
    procedure ModifyLine(AId: Integer; const ALineName: WideString; const AMemo: WideString); safecall;
    procedure DeleteLine(AId: Integer); safecall;
    function QueryLines: OleVariant; safecall;
    function AddLineStation(ALineId: Integer; AInStationID: Integer; ALineSatationNo: Integer; 
                            AOnOrDown: Integer; ALineStationTrueNo: Integer): OleVariant; safecall;
    procedure ModifyLineStation(AId: Integer; ALineId: Integer; AInStationID: Integer; 
                                ALineSatationNo: Integer); safecall;
    procedure DeleteLineStation(ALineId: Integer); safecall;
    function QueryLineStation(ALineId: Integer): OleVariant; safecall;
    function AddDevLine(const DevID: WideString; LineID: Integer): OleVariant; safecall;
    function QueryStationTypeList: OleVariant; safecall;
    function QueryBusLineDevs(ALineId: Integer): OleVariant; safecall;
    function AddNewUserOpenBusLines(AUserID: Integer; ABusLineID: Integer): OleVariant; safecall;
    function QueryUserOpenBusLines(AUserID: Integer): OleVariant; safecall;
    procedure DeleteUserOpenBusLines(AUserID: Integer); safecall;
    function AddNewBusFrequency(const DevIDStr: WideString; const SignTime: WideString; 
                                StationId: Integer; const StartTime: WideString; BusLineID: Integer): OleVariant; safecall;
    procedure DeleteBusFrequency(const ADevIDStr: WideString); safecall;
    function QueryBusFrequency(ALineId: Integer; const ADevIDStr: WideString): OleVariant; safecall;
    procedure AddNewDevRunInfo(const DevIDStr: WideString; const StartTime: WideString; 
                               const endTime: WideString; RunTime: Integer); safecall;
    procedure AddNewDriverRunInfo(const DevIDStr: WideString; const DriverNo: WideString; 
                                  InStationID: Integer; StartinTime: TDateTime; 
                                  SartoutTime: TDateTime; EndInTime: TDateTime; 
                                  EndOutTime: TDateTime; AType: Integer; PreEndOutTime: TDateTime; 
                                  EndStationId: Integer); safecall;
    function QueryDriverRunInfo(const ADriverNo: WideString; const AStartTime: WideString; 
                                const AEndTime: WideString; const ACarNo: WideString; 
                                const ALineName: WideString): OleVariant; safecall;
    procedure AddNewOtherSituation(const DevIDStr: WideString; const DriverNo: WideString; 
                                   const StartTime: WideString; const endTime: WideString; 
                                   Course: Double; const OtherTypeName: WideString); safecall;
    function QueryOtherSituation(const ACarNo: WideString; const AStartTime: WideString; 
                                 const AEndTime: WideString; const AType: WideString): OleVariant; safecall;
    procedure ChangeDevBusLine(const DevIDStr: WideString; oldLine: Integer; newLine: Integer; 
                               const StartTime: WideString; const endTime: WideString; 
                               const operTime: WideString); safecall;
    function QueryChangeDevBusLine(const ADevID: WideString; const AStartTime: WideString; 
                                   const AEndTime: WideString): OleVariant; safecall;
    function AddNewArea(AreaNo: Integer; const AreaName: WideString; AreaType: Integer; 
                        AreaPointCnt: Integer; OverSpeed: Integer): OleVariant; safecall;
    function QuerAreaList: OleVariant; safecall;
    procedure DeleteArea(AreaID: Integer); safecall;
    function AddNewAreaInfo(AreaID: Integer; X: Integer; Y: Integer): OleVariant; safecall;
    procedure DeleteAreaInfo(AAreaID: Integer); safecall;
    function QueryAreaInfo(AAreaID: Integer): OleVariant; safecall;
    function AddNewDevAreas(const DevID: WideString; AreaID: Integer): OleVariant; safecall;
    procedure DeleteDevAreas(const DevID: WideString; AreaID: Integer); safecall;
    function QueryDevAreas(AAreaID: Integer): OleVariant; safecall;
    function QueryOverSpeedInfo(const beginTime: WideString; const endTime: WideString; 
                                const DevIDStr: WideString; group_Id: Integer): OleVariant; safecall;
    function QueryStopTime(const DevIDStr: WideString; const beginTime: WideString; 
                           const endTime: WideString): OleVariant; safecall;
    function QueryStopInfo(AStopId: Integer): OleVariant; safecall;
    function AddNewFactorySite(UserId: Integer; const name: WideString; TypeID: Integer; 
                               Longtiude: Integer; Latitude: Integer; leftTopLongtiude: Integer; 
                               leftTopLatitude: Integer; rightBootomLongtiude: Integer; 
                               rightBootomLatitude: Integer; Scope: Integer; FontSize: Integer; 
                               const FontName: WideString; FontColor: Integer; 
                               const Memo: WideString): OleVariant; safecall;
    function QueryFactorySite: OleVariant; safecall;
    procedure DeleteFactorySite(AId: Integer); safecall;
    function QueryCarInOrOutSite(const beginTime: WideString; const endTime: WideString): OleVariant; safecall;
    function TaxiMetaMoneryMonthTj(const Car_No: WideString; const M: WideString; group_Id: Integer): OleVariant; safecall;
    function StatTaxRunDataByDay(const fromDate: WideString; const toDate: WideString; 
                                 group_Id: Integer): OleVariant; safecall;
    function TaxiMetaMoneryMonthTjChat(const M: WideString; group_Id: Integer): OleVariant; safecall;
    function statRunDataMoneryByDayChat(const AFromDate: WideString; const AEndDate: WideString; 
                                        group_Id: Integer): OleVariant; safecall;
    function QueryTaxiTj(const ARq: WideString; AGroupID: Integer): OleVariant; safecall;
    function QueryDevPostion(const DevID: WideString; const beginTime: WideString; 
                             const endTime: WideString; beginLat: Integer; beginLong: Integer; 
                             endLat: Integer; endLong: Integer): OleVariant; safecall;
    function AddNewLedAd(const DataType: WideString; DisSpeed: Integer; const InType: WideString; 
                         const ExitType: WideString; const X: WideString; const Y: WideString; 
                         StopTime: Integer; const Font: WideString; IsDisTime: Integer; 
                         const Extend: WideString; const LedMemo: WideString; 
                         const RunTime: WideString; const endTime: WideString; 
                         const CusTerm: WideString; const custermPer: WideString; 
                         const custermTel: WideString; const Memo: WideString): OleVariant; safecall;
    procedure ModifyLedAd(id: Integer; const DataType: WideString; DisSpeed: Integer; 
                          const InType: WideString; const ExitType: WideString; 
                          const X: WideString; const Y: WideString; StopTime: Integer; 
                          const Font: WideString; IsDisTime: Integer; const Extend: WideString; 
                          const LedMemo: WideString; const RunTime: WideString; 
                          const endTime: WideString; const CusTerm: WideString; 
                          const custermPer: WideString; const custermTel: WideString; 
                          const Memo: WideString); safecall;
    procedure DeleteLedAd(AId: Integer); safecall;
    function AddLedDev(LedID: Integer; const DevID: WideString; LedNo: Integer): OleVariant; safecall;
    procedure DeleteLedDev(LedID: Integer; const DevID: WideString; LedNo: Integer); safecall;
    function QueryAdByID(LedID: Integer; const DevID: WideString): OleVariant; safecall;
    function QueryLedAd(LedID: Integer): OleVariant; safecall;
    function QueryGpsHourDis(const carNo: WideString; const beginTime: WideString; 
                             const endTime: WideString; group_Id: Integer): OleVariant; safecall;
    procedure SetDevOil(const DevID: WideString; oil: Double); safecall;
    function QueryDevOil(const DevID: WideString): OleVariant; safecall;
    function SetLineLedHint(LineID: Integer; OnOrDown: Integer; L1: Integer; L2: Integer; 
                            L3: Integer; L4: Integer; L5: Integer; L6: Integer; L7: Integer; 
                            L8: Integer; L9: Integer; L10: Integer; L11: Integer; L12: Integer; 
                            L13: Integer; L14: Integer; L15: Integer; L16: Integer; L17: Integer; 
                            L18: Integer; L19: Integer; L20: Integer; L21: Integer; L22: Integer; 
                            L23: Integer; L24: Integer; L25: Integer; L26: Integer; L27: Integer; 
                            L28: Integer; L29: Integer; L30: Integer; L31: Integer; L32: Integer; 
                            L33: Integer; L34: Integer; L35: Integer; L36: Integer; L37: Integer; 
                            L38: Integer; L39: Integer; L40: Integer; L41: Integer; L42: Integer; 
                            L43: Integer; L44: Integer; L45: Integer; L46: Integer; L47: Integer; 
                            L48: Integer): OleVariant; safecall;
    function QueryLineLed(LineID: Integer; OnOrDown: Integer): OleVariant; safecall;
    function QueryStationByLine(InStationID: Integer): OleVariant; safecall;
    function QueryInStationOnLineMinAndMaxNo(LineID: Integer; OnOrDown: Integer): OleVariant; safecall;
    function QueryOverSpeed(const carNo: WideString; const AFromDate: WideString; 
                            const AEndDate: WideString; AGroupID: Integer): OleVariant; safecall;
    function QueryOverSpeedSec(const carNo: WideString; const AFromDate: WideString; 
                               const AEndDate: WideString; AGroupID: Integer): OleVariant; safecall;
    function StatTaxiRunDataByMonth(const AFromDate: WideString; const AEndDate: WideString; 
                                    groupId: Integer): OleVariant; safecall;
    function QuerryCarCarrayOffXslc(const ADevS: WideString; AFromTime: TDateTime; 
                                    AToTime: TDateTime; AMilType: Integer): OleVariant; safecall;
    function QuerryCarDayXslc(const ADevS: WideString; AFromTime: TDateTime; AToTime: TDateTime): OleVariant; safecall;
    function QuerryCarMonthXslc(const ADevS: WideString; const Ayf: WideString): OleVariant; safecall;
    function AddNewArea_New(const AreaName: WideString; IsWarn: Integer; OverSpeed: Integer; 
                            IdlSpeed: Integer; AreaType: Integer; AreaParLen: Integer; 
                            const AreaPar: WideString; IsVisible: Integer): OleVariant; safecall;
    procedure DeleteArea_New(AreaID: Integer); safecall;
    function QueryArea_New: OleVariant; safecall;
    function AddNewAreaByDev_New(AreaID: Integer; const DevID: WideString): OleVariant; safecall;
    function QueryAreaByDev_New(const DevID: WideString; AreaID: Integer): OleVariant; safecall;
    procedure DeleteAreaByDev_New(const DevID: WideString; AreaID: Integer); safecall;
    procedure ModifyArea_New(const AreaName: WideString; IsWarn: Integer; OverSpeed: Integer; 
                             IdlSpeed: Integer; AreaType: Integer; AreaParLen: Integer; 
                             const AreaPar: WideString; AreaID: Integer; IsVisible: Integer); safecall;
    function TjCarXslcByMonth(const carNo: WideString; const M: WideString; groupId: Integer): OleVariant; safecall;
    function QueryAreaWarn(const carNo: WideString; const beginwarnTime: WideString; 
                           const endWarnTime: WideString; group_Id: Integer; WarnType: Integer): OleVariant; safecall;
    function QueryOtherSms(const carNo: WideString; group_Id: Integer; 
                           const beginRecTime: WideString; const endRecTime: WideString): OleVariant; safecall;
    function QueryRunDataCount_CS(const ACarNo: WideString; const AFrmDate: WideString; 
                                  const AToDate: WideString; const TradType: WideString): OleVariant; safecall;
    function QueryRunDatas_CS(const ACarNo: WideString; const AFromDate: WideString; 
                              const AToDate: WideString; AStartIndex: Integer; AGetCount: Integer; 
                              const TradType: WideString; out ARunData: OleVariant): OleVariant; safecall;
    function TjAreaWary(group_Id: Integer; wartype: Integer; const tjTime_Start: WideString; 
                        const tjTime_End: WideString): OleVariant; safecall;
    function TjOverSpeed(const beginTime: WideString; const endTime: WideString; Car_Id: Integer; 
                         group_Id: Integer): OleVariant; safecall;
    function QueryEmergencyAlarm(const beginTime: WideString; const endTime: WideString; 
                                 Car_Id: Integer; group_Id: Integer): OleVariant; safecall;
    function QueryAreaByDevs_New(const ADevIDs: WideString): OleVariant; safecall;
    function QueryDriverFatigueRecord(const beginTime: WideString; const endTime: WideString; 
                                      const DevID: WideString; GrpId: Integer): OleVariant; safecall;
    function QueryGrpDevs(UserId: Integer): OleVariant; safecall;
    function QueryDevMonthRunInfo(const DevIDStr: WideString; const Yf: WideString; 
                                  OverSpeedNum: Integer): OleVariant; safecall;
    function AddNewCompany(const companyNo: WideString; const companyName: WideString; 
                           const Memo: WideString): OleVariant; safecall;
    procedure ModifyCompany(AId: Integer; const companyNo: WideString; 
                            const companyName: WideString; const Memo: WideString); safecall;
    procedure DeleteCompany(AId: Integer); safecall;
    function QueryCompany(const companyNo: WideString; const companyName: WideString): OleVariant; safecall;
    function AddNewBuilding(const buildSiteNo: WideString; const buildSiteName: WideString; 
                            companyId: Integer; const siteName: WideString; 
                            const siteTel: WideString; const salesman: WideString; 
                            const salemanTel: WideString; AreaType: Integer; AreaParLen: Integer; 
                            const AreaPar: WideString; IsVisible: Integer; const Memo: WideString; 
                            const extend1: WideString; const extend2: WideString): OleVariant; safecall;
    procedure ModifyBuilding(AId: Integer; const buildSiteNo: WideString; 
                             const buildSiteName: WideString; companyId: Integer; 
                             const siteName: WideString; const siteTel: WideString; 
                             const salesman: WideString; const salemanTel: WideString; 
                             AreaType: Integer; AreaParLen: Integer; const AreaPar: WideString; 
                             IsVisible: Integer; const Memo: WideString; const extend1: WideString; 
                             const extend2: WideString); safecall;
    procedure DeleteBuilding(AId: Integer); safecall;
    function QueryBuilding(const buildSiteName: WideString): OleVariant; safecall;
    function AddNewProTask(sendStatus: Integer; status: Integer; const createTime: WideString; 
                           factoryId: Integer; projectId: Integer; destineNum: Single; 
                           const bCarNo: WideString; const tab: WideString; 
                           const constructPart: WideString; const taLudu: WideString; 
                           const salename: WideString; const destineTime: WideString; 
                           const extend1: WideString; const extend2: WideString): OleVariant; safecall;
    procedure ModifyProTask(AId: Integer; sendStatus: Integer; status: Integer; 
                            const createTime: WideString; factoryId: Integer; buildingId: Integer; 
                            destineNum: Single; const bCarNo: WideString; const tab: WideString; 
                            const constructPart: WideString; const taLudu: WideString; 
                            const salename: WideString; const destineTime: WideString; 
                            const extend1: WideString; const extend2: WideString); safecall;
    procedure DleteProTask(taskId: Integer); safecall;
    function QueryProTask(const createTime: WideString; factoryId: Integer; buildingId: Integer; 
                          status: Integer; sendStatus: Integer): OleVariant; safecall;
    function AddNewFact(const factoryNo: WideString; const factoryName: WideString; 
                        const factoryTel: WideString; const linkName: WideString; 
                        AreaType: Integer; AreaParLen: Integer; const AreaPar: WideString; 
                        IsVisible: Integer; const extend1: WideString; const extend2: WideString): OleVariant; safecall;
    procedure ModifyFact(AId: Integer; const factoryNo: WideString; const factoryName: WideString; 
                         const factoryTel: WideString; const linkName: WideString; 
                         AreaType: Integer; AreaParLen: Integer; const AreaPar: WideString; 
                         IsVisible: Integer; const extend1: WideString; const extend2: WideString); safecall;
    procedure DeleteFact(AId: Integer); safecall;
    function AddAttemper(attemperNo: Integer; taskId: Integer; const DriverNo: WideString; 
                         const carNo: WideString; eachCube: Single; const StartTime: WideString; 
                         const arriveTime: WideString; const unloadStartTime: WideString; 
                         const unloadEndTime: WideString; const backFactoryTime: WideString; 
                         totalCube: Single; const Memo: WideString; const extend1: WideString; 
                         const extend2: WideString): OleVariant; safecall;
    function QueryAttemper(const carNo: WideString; finishStatus: Integer): OleVariant; safecall;
    function QueryFact(const factoryNo: WideString): OleVariant; safecall;
    procedure ModifyAttemper(AId: Integer; attemperNo: Integer; taskId: Integer; 
                             const DriverNo: WideString; const carNo: WideString; eachCube: Single; 
                             const StartTime: WideString; const arriveTime: WideString; 
                             const unloadStartTime: WideString; const unloadEndTime: WideString; 
                             const backFactoryTime: WideString; totalCube: Single; 
                             const Memo: WideString; const extend1: WideString; 
                             const extend2: WideString); safecall;
    function QueryAttemperByTaskId(taskId: Integer): OleVariant; safecall;
    procedure DeleteAttemper(attemperId: Integer); safecall;
    procedure ModifyProTaskDoneStatus(status: Integer; taskId: Integer); safecall;
    function QueryOverSpeedInfo1(const beginTime: WideString; const endTime: WideString; 
                                 const DevIDStr: WideString; group_Id: Integer; 
                                 const group_paranet: WideString): OleVariant; safecall;
    function QueryEmergencyAlarm1(const beginTime: WideString; const endTime: WideString; 
                                  Car_Id: Integer; group_Id: Integer; 
                                  const group_paranet: WideString): OleVariant; safecall;
    procedure ModifyAttemperInfo(AId: Integer; attemperNo: Integer; taskId: Integer; 
                                 eachCube: Single; const StartTime: WideString; 
                                 const arriveTime: WideString; const unloadStartTime: WideString; 
                                 const unloadEndTime: WideString; 
                                 const backFactoryTime: WideString; const Memo: WideString); safecall;
    function QueryAttemperCarInfo(taskId: Integer; const DriverNo: WideString; 
                                  const DevIDStr: WideString): OleVariant; safecall;
    function QueryDevGpsRunInfo(const DevIDStr: WideString; AStartTime: TDateTime; 
                                AEndTime: TDateTime): OleVariant; safecall;
    function QueryStopCarOverTImeAlarm(const DevIDStr: WideString; const start_Time: WideString; 
                                       const end_Time: WideString; groupId: Integer; 
                                       const groupParanet: WideString): OleVariant; safecall;
    function QueryDevOilHeight(const DevIDStr: WideString; const StartTime: WideString; 
                               const endTime: WideString): OleVariant; safecall;
    function QueryOverSpeedInfo_Condition(const beginTime: WideString; const endTime: WideString; 
                                          const DevIDStr: WideString; group_Id: Integer; 
                                          const group_paranet: WideString; 
                                          const conditionStr: WideString): OleVariant; safecall;
    function TjOverSpeed_Condition(const beginTime: WideString; const endTime: WideString; 
                                   Car_Id: Integer; group_Id: Integer; 
                                   const group_SonListStr: WideString; 
                                   const conditionStr: WideString): OleVariant; safecall;
    function QueryHistoryGpsData(ADevID: Integer; AFromTime: TDateTime; AToTime: TDateTime; 
                                 AStartIndex: Integer; AGetCount: Integer): OleVariant; safecall;
  end;

// *********************************************************************//
// DispIntf:  IBusinessDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B09F1FA7-6052-4E07-BF72-8B049F22B640}
// *********************************************************************//
  IBusinessDisp = dispinterface
    ['{B09F1FA7-6052-4E07-BF72-8B049F22B640}']
    function QueryUserList: OleVariant; dispid 301;
    function AddNewUser(const AUserName: WideString; const APassword: WideString; AUserRole: Integer): OleVariant; dispid 302;
    procedure DeleteUser(AUserID: Integer); dispid 303;
    procedure ModifyUser(AUserID: Integer; const AUserName: WideString; 
                         const AUserPass: WideString; AUserRole: Integer; AUserStat: Integer); dispid 304;
    function QueryRoleList: OleVariant; dispid 305;
    function AddNewRole(const ARoleName: WideString; const ARoleDesc: WideString): OleVariant; dispid 306;
    procedure ModifyRole(ARoleID: Integer; const ARoleName: WideString; const ARoleDesc: WideString); dispid 307;
    procedure DeleteRole(ARoleID: Integer); dispid 308;
    procedure ModifyRolePrivilege(ARoleID: Integer; APrivilegeList: OleVariant; 
                                  APrivilegeVisible: OleVariant; APrivlegeEnabled: OleVariant); dispid 309;
    function QueryUserGroupList(AUserID: Integer): OleVariant; dispid 310;
    procedure ModifyUserGroupList(AUserID: Integer; AGroupList: OleVariant); dispid 311;
    function QueryDevList: OleVariant; dispid 312;
    procedure AddNewDev(const ADevID: WideString; AConntype: Integer; AGroup: Integer; 
                        ACarID: Integer; const ADispLabel: WideString; const ASimNo: WideString; 
                        const ADisPlay: WideString; AManuID: Integer); dispid 313;
    procedure DeleteDev(const ADevID: WideString); dispid 314;
    procedure ModifyDev(const ADevID: WideString; AConntype: Integer; AGroup: Integer; 
                        ACarID: Integer; const ADispLabel: WideString; const ASimNo: WideString; 
                        AManuID: Integer; const ADisPlay: WideString); dispid 315;
    function QueryCarList: OleVariant; dispid 316;
    function AddNewCar(const ACarNo: WideString; const ACarMemo: WideString; AResID: Integer; 
                       ACarTypeID: Integer): OleVariant; dispid 317;
    procedure DeleteCar(ACarID: Integer); dispid 318;
    procedure ModifyCar(ACarID: Integer; const ACarNo: WideString; const ACarMemo: WideString; 
                        AResID: Integer; ACarTypeID: Integer); dispid 319;
    function QueryGroupList: OleVariant; dispid 320;
    function AddNewGroup(const AGroupName: WideString; AParent: Integer; ALeafNode: Byte; 
                         const AGroupAddr: WideString; const AGroupTel: WideString; 
                         const AGroupCorpo: WideString): OleVariant; dispid 321;
    procedure DeleteGroup(AGroupID: Integer); dispid 322;
    procedure ModifyGroup(AGroupID: Integer; const AGroupName: WideString; AParent: Integer; 
                          ALeafNode: Byte; const AGroupAddr: WideString; 
                          const AGroupTel: WideString; const ACorpor: WideString); dispid 323;
    function QueryConntypeList: OleVariant; dispid 324;
    function AddNewConntype(const AConntypename: WideString; const AConntypeDesc: WideString): OleVariant; dispid 325;
    procedure DeleteConntype(AConntypeID: Integer); dispid 326;
    procedure ModifyConntype(AConntypeID: Integer; const AConntypename: WideString; 
                             const AConntypeDesc: WideString); dispid 327;
    function QuerySwitchList: OleVariant; dispid 328;
    function AddNewSwitch(AImgID: Integer; AConntypeID: Integer; const ASwitchName: WideString; 
                          ASwitchOrder: Integer): OleVariant; dispid 329;
    procedure DeleteSwitch(ASwitchID: Integer); dispid 330;
    procedure ModifySwitch(ASwitchID: Integer; AImgID: Integer; AConntypeID: Integer; 
                           ASwitchOrder: Integer; const ASwitchName: WideString); dispid 331;
    function QueryResList: OleVariant; dispid 332;
    function UploadNewRes(const AResName: WideString; const AResExtType: WideString; 
                          AResContent: OleVariant): OleVariant; dispid 333;
    procedure DeleteRes(AResID: Integer); dispid 334;
    procedure ModifyRes(AResID: Integer; const AResName: WideString; const AResExtType: WideString; 
                        AResContent: OleVariant); dispid 335;
    function DownLoadRes(AResID: Integer): OleVariant; dispid 336;
    function DownAllRes: OleVariant; dispid 337;
    procedure UploadConfigFile(const AConfigFileContent: WideString); dispid 338;
    function QueryUser(AUserID: Integer): OleVariant; dispid 339;
    function QueryRole(ARoleID: Integer): OleVariant; dispid 340;
    function QueryRolePrivilege(ARoleID: Integer): OleVariant; dispid 341;
    function QueryDev(const ADevID: WideString): OleVariant; dispid 342;
    function QueryCar(ACarID: Integer): OleVariant; dispid 343;
    function QueryDevByList(ADevList: OleVariant): OleVariant; dispid 344;
    function QueryCarByList(ACarList: OleVariant): OleVariant; dispid 345;
    function DownResList(AResList: OleVariant): OleVariant; dispid 346;
    function Login(const AUserName: WideString; const AUserPass: WideString; AnAddParam: Integer): OleVariant; dispid 347;
    procedure Logout(AUserID: Integer); dispid 348;
    function GW_CheckUser(AUserID: Integer; const AUserPass: WideString): OleVariant; dispid 349;
    function GW_RefreshDevUser(var ALocalTimeStamp: OleVariant; out ADevUserDynAry: OleVariant): OleVariant; dispid 350;
    procedure GW_DevRegLog(ADevID: Integer; AnAction: Integer; ATime: Double); dispid 351;
    procedure GW_WriteLog(AnActoID: Integer; const AnDevID: WideString; AnActionType: Integer; 
                          const AnActionDesc: WideString); dispid 352;
    procedure ChangePassword(AUserID: Integer; const AnOldPass: WideString; 
                             const AnNewPass: WideString); dispid 353;
    function RequestConfigParam: OleVariant; dispid 354;
    function QueryHistoryCount(ADevID: Integer; AFromTime: TDateTime; AToTime: TDateTime): OleVariant; dispid 355;
    function QueryHistory(ADevID: Integer; AFromTime: TDateTime; AToTime: TDateTime; 
                          AStartIndex: Integer; AGetCount: Integer; out AGpsData: OleVariant): OleVariant; dispid 356;
    function AddNewMessage(AMsgType: Integer; const ADevID: WideString; 
                           const AMsgContent: WideString): OleVariant; dispid 357;
    procedure GW_SetMsgState(AMsgID: Integer; AMsgState: Integer; const AMsgMemo: WideString); dispid 358;
    function QueryMsgList(ADevList: OleVariant; AFromTime: TDateTime; AToTime: TDateTime): OleVariant; dispid 359;
    function QueryMsgListEx(ADevList: OleVariant; AFromTime: TDateTime; AToTime: TDateTime; 
                            AMsgState: Integer): OleVariant; dispid 360;
    function QueryDevCntByGrpId(AGroupID: Integer): OleVariant; dispid 361;
    function SMS_QueryDevList: OleVariant; dispid 362;
    function SMS_RefreshDevIDSIM(var ALocalTimeStamp: OleVariant; out ADevIDSIMDynAry: OleVariant): OleVariant; dispid 363;
    procedure AddNewSmsInfo(ASmsID: Integer; const ASmsNo: WideString; ASmsType: Integer; 
                            const ASmsMemo: WideString); dispid 364;
    procedure ModifySmsInfo(ASmsID: Integer; const ASmsNo: WideString; ASmsType: Integer; 
                            const ASmsMemo: WideString); dispid 365;
    procedure DeleteSmsInfo(ASmsID: Integer); dispid 366;
    function QuerySmsInfoList: OleVariant; dispid 367;
    procedure ModifySmsGroupList(ASmsID: Integer; AGroupList: OleVariant; ASmsType: Integer); dispid 368;
    function QuerySmsInfoGroupList(ASmsID: Integer): OleVariant; dispid 369;
    function QuerySmsDevList(const sim_no: WideString): OleVariant; dispid 370;
    procedure UpdateDevParam(ADevID: Integer; const ADomainName: WideString; 
                             const AIpAddress: WideString; APort: Integer; 
                             const ASMSCenter: WideString; AReturnInterval: Integer; 
                             AReturnCount: Integer; AAlaramInterval: Integer; 
                             AAlaramReSendCount: Integer; ABound: Integer; AIostat: Integer; 
                             AExternalEnable: Integer; const AApn: WideString; 
                             const AListentel: WideString; const AWorktel: WideString; 
                             const AKeytel1: WideString; const AKeytel2: WideString; 
                             const AKeytel3: WideString; const AKeytel4: WideString); dispid 371;
    function QueryDevParam(ADevID: Integer): OleVariant; dispid 372;
    function QueryDevParamList: OleVariant; dispid 373;
    function Sms_RefreshDevSMSServer(var ALocalTimeStamp: OleVariant; const ASMS_SimNo: WideString; 
                                     out ADevSMSServerAry: OleVariant): OleVariant; dispid 374;
    function AddNewCarType(const ATypeName: WideString): OleVariant; dispid 375;
    procedure ModifyCarType(ACarTypeID: Integer; const ACarTypeName: WideString); dispid 376;
    procedure DeleteCarType(ATypeID: Integer); dispid 377;
    function QueryCarType: OleVariant; dispid 378;
    function AddNewDriver(const ADriverName: WideString; const ADriverTel: WideString; 
                          const ADriverAddr: WideString; const ADriverCard: WideString; 
                          ADriverPhot: OleVariant; ACarID: Integer; AGroupID: Integer; 
                          const ADriverNo: WideString; ADriverKind: Integer): OleVariant; dispid 379;
    procedure ModifyDriver(ADriverID: Integer; const ADriverName: WideString; 
                           const ADriverTel: WideString; const ADriverAddr: WideString; 
                           const ADriverCard: WideString; ADriverPhoto: OleVariant; 
                           ACarID: Integer; AGroupID: Integer; const ADriverNo: WideString; 
                           ADriverKind: Integer); dispid 380;
    function AddNewDisplayTel(const ATelNo: WideString; ATelType: Integer; const DevID: WideString; 
                              const ATelName: WideString): OleVariant; dispid 381;
    procedure DeleteDisplayTel(ATelID: Integer); dispid 382;
    function QueryDisplayTelList: OleVariant; dispid 383;
    procedure ModifyDisplayTel(ATelID: Integer; const ADevID: WideString; const ATelNo: WideString; 
                               const ATelName: WideString; ATelType: Integer); dispid 384;
    procedure AddNewDisplayMenu(AMenuID: Integer; AParent: Integer; ALeafNode: Byte; 
                                const ADevID: WideString; const AName: WideString); dispid 385;
    procedure ModifyDisplayMenu(AMenuID: Integer; AParent: Integer; ALeafNod: Byte; 
                                const AMemo: WideString; const ADevID: WideString); dispid 387;
    function QueryDisplayMenuList: OleVariant; dispid 388;
    function AddNewTaxiMeta(ACarID: Integer; AManuID: Integer; const ATaxiMetaNo: WideString; 
                            const AStopDate: WideString; const AInstallDate: WideString): OleVariant; dispid 389;
    procedure ModifyTaxiMeta(ATaxiMetaId: Integer; ACarID: Integer; AManuID: Integer; 
                             const ATaxiMetaNo: WideString; const AStopDate: WideString; 
                             const AInstallDate: WideString); dispid 390;
    function QueryTaxiMetaList: OleVariant; dispid 391;
    procedure DeleteTaxiMeta(ATaxiMetaId: Integer); dispid 392;
    function AddNewDevManufact(const ADevManufact_Name: WideString; 
                               const ADevManufact_No: WideString): OleVariant; dispid 393;
    procedure ModifyDevManufact(ADevManufact_ID: Integer; const ADevManufact_Name: WideString; 
                                const ADevManufact_No: WideString); dispid 394;
    function QueryDevManufactList: OleVariant; dispid 395;
    procedure DeleteDevManufact(ADevManufact_ID: Integer); dispid 396;
    function QueryTaxiMeta(ATaxiMetaId: Integer): OleVariant; dispid 397;
    function QueryDevManufact(ADevManufact_ID: Integer): OleVariant; dispid 398;
    procedure DeleteDevDisplayMenus(const ADev_Id: WideString); dispid 399;
    procedure DeleteDevDisplayMenu(const ADev_Id: WideString; ADisplayMenu_Id: Integer); dispid 400;
    procedure DeleteDevDisplayTels(const ADevID: WideString); dispid 386;
    function QueryDriverList: OleVariant; dispid 401;
    procedure DeleteDriver(ADriver_ID: Integer); dispid 402;
    procedure ModifyDevDisplayName(const ADevID: WideString; const ADevDisplayName: WideString); dispid 403;
    function QueryRolePrivilegeList: OleVariant; dispid 404;
    function AddNewParam(AparamNo: Integer; const AParamMemo: WideString; const ADevID: WideString): OleVariant; dispid 405;
    procedure ModifyParam(AParamID: Integer; AparamNo: Integer; const ADevID: WideString; 
                          const AParamMemo: WideString); dispid 406;
    procedure DeleteParamByDevID(const ADevID: WideString); dispid 407;
    function QueryParamByDevID(const ADevID: WideString): OleVariant; dispid 408;
    function QueryPrivilegeList: OleVariant; dispid 409;
    procedure DeleteParamByNoDevID(AparamNo: Integer; const ADevID: WideString); dispid 410;
    function QueryRunDataByCarDate(const ACar_NO: WideString; const ARide_Date1: WideString; 
                                   const ARide_Date2: WideString): OleVariant; dispid 411;
    function QueryRunDataCount(const ACarNo: WideString; const ADate: WideString; 
                               const AToDate: WideString): OleVariant; dispid 412;
    function QueryRunData(const ACarNo: WideString; const AFromDate: WideString; 
                          const AToDate: WideString; AStartIndex: Integer; AGetCount: Integer; 
                          out ARunData: OleVariant): OleVariant; dispid 413;
    procedure ModifyUserPass(AUserID: Integer; const AUserPass: WideString; 
                             const AnewPass: WideString); dispid 415;
    function AddNewOrders(AType: OleVariant; ADate: TDateTime; const AContent: WideString; 
                          const AUserTel: WideString; const APartContent: WideString; 
                          ASendDate: TDateTime; ADevIDAry: OleVariant): OleVariant; dispid 416;
    function QueryOrders(AType: OleVariant; AFromDate: TDateTime; AToDate: TDateTime; 
                         const ACustomTel: WideString; ADevID: Integer; AUserID: Integer): OleVariant; dispid 417;
    procedure ModifyOrders(AOrderID: Integer; ADevID: Integer; AResult: OleVariant; 
                           const AMemo: WideString; ACancelTime: TDateTime; ASecuTime: TDateTime; 
                           DevCancelReasonID: Integer); dispid 418;
    function QueryOrderByID(AOrderID: Integer): OleVariant; dispid 419;
    function QueryAllDev: OleVariant; dispid 420;
    function AddCancelOrderReason(AMenuID: OleVariant; const ADev_Id: WideString; 
                                  const aReason: WideString): OleVariant; dispid 421;
    procedure DelCancelOrderReason(const ADevID: WideString); dispid 422;
    function QueryCancelMenuByDev(const ADevID: WideString): OleVariant; dispid 423;
    function GetTime: OleVariant; dispid 424;
    function QueryMessage(AMsgID: Integer): OleVariant; dispid 425;
    function StatRunDatabyDate(ACarNoAry: OleVariant; const AFromDate: WideString; 
                               const AToDate: WideString): OleVariant; dispid 426;
    procedure AddNewDkc(const carNo: WideString; const onDate: WideString; 
                        const onTime: WideString; const offTime: WideString; 
                        const waitTime: WideString; xslc: Double; yyje: Double; kslc: Double; 
                        const DevID: WideString); dispid 427;
    function AddUser(const AUserName: WideString; const APassword: WideString; AUserRole: Integer; 
                     const AMemo: WideString): OleVariant; dispid 428;
    procedure UpdateUser(AUserID: Integer; const AUserName: WideString; 
                         const AUserPass: WideString; AUserRole: Integer; AUserStat: Integer; 
                         const AMemo: WideString); dispid 429;
    function QueryParamByDevIDs(const ADevIDs: WideString): OleVariant; dispid 430;
    function QueryParams: OleVariant; dispid 431;
    function QueryCancelMenu: OleVariant; dispid 432;
    function QueryDriverTimes(const DriverNo: WideString; start_Time: TDateTime; 
                              end_Time: TDateTime; const DevID: WideString; AGrpId: Integer): OleVariant; dispid 433;
    function QueryOperationDriverCards(const DriverNo: WideString; start_Time: TDateTime; 
                                       end_Time: TDateTime): OleVariant; dispid 434;
    function AddNewOperationDriverCard(const DriverNo: WideString): OleVariant; dispid 435;
    function QueryDriverForClient: OleVariant; dispid 436;
    function AddCar(const ACarNo: WideString; const ACarMemo: WideString; AResID: Integer; 
                    ACarTypeID: Integer; const ACarPass: WideString): OleVariant; dispid 437;
    procedure updateCar(ACarID: Integer; const ACarNo: WideString; const ACarMemo: WideString; 
                        AResID: Integer; ACarTypeID: Integer; const ACarPass: WideString); dispid 438;
    function StatRunDataByMonth(ACarNo: OleVariant; AFromDate: TDateTime; AToDate: TDateTime): OleVariant; dispid 439;
    function StatTaxiDataByDate(ACarNo: OleVariant; AFromDate: TDateTime; AToDate: TDateTime): OleVariant; dispid 440;
    function QueryHistoryNew(ADevID: Integer; AFromTime: TDateTime; AToTime: TDateTime; 
                             AStartIndex: Integer; AGetCount: Integer; out AGpsData: OleVariant): OleVariant; dispid 441;
    function QueryHistoryCountNew(ADevID: Integer; AFromTime: TDateTime; AToTime: TDateTime): OleVariant; dispid 442;
    function QueryCancelMenuByDev_Zb(const ADevID: WideString): OleVariant; dispid 444;
    function AddCancelOrderReason_Zb(AMenuID: OleVariant; const ADevID: WideString): OleVariant; dispid 445;
    procedure DelCancelOrderReason_Zb(const ADevID: WideString); dispid 446;
    function AddCancelReason(const aReason: WideString): OleVariant; dispid 447;
    procedure ModifyCancelReason(AReasonID: Integer; const aReason: WideString); dispid 448;
    procedure DelCancelReason(AReasonID: Integer); dispid 449;
    function QueryCancelReason: OleVariant; dispid 450;
    function QueryCancelMenu_Zb: OleVariant; dispid 451;
    function AddNewDevOrder(DevID: Integer; OrderId: Integer; stat: Integer): OleVariant; dispid 452;
    procedure DeleteCallCenterOrder(AOrderID: Integer); dispid 453;
    procedure DeleteDevOrder(ADevID: Integer; AOrderID: Integer); dispid 454;
    function QueryCallcenterOrder: OleVariant; dispid 455;
    function QueryDevOrder(ADevID: Integer): OleVariant; dispid 456;
    procedure AddNewCallCenterOrder(aCmdID: Integer; AOrderID: Integer; const name: WideString; 
                                    sex: Integer; const tel: WideString; needCars: Integer; 
                                    const address: WideString; const detailAddress: WideString; 
                                    onDate: TDateTime; orderType: Integer; orderRadius: Integer); dispid 443;
    function QueryCarCarryed(const devIdAny: WideString; beginTime: TDateTime; endTime: TDateTime): OleVariant; dispid 457;
    function CarryedStat(devIdArryay: OleVariant; beginTime: TDateTime; endTime: TDateTime): OleVariant; dispid 458;
    function QueryPhotoByDevAndPicIndex(ADevID: Integer; APicIndex: Integer): OleVariant; dispid 459;
    function QueryPhotosByDevID(ADevID: Integer; ABeginTime: TDateTime; AEndTime: TDateTime): OleVariant; dispid 460;
    function GetOrderID: OleVariant; dispid 461;
    procedure ModiyfyNewOrder(BespeakDateTime: TDateTime; CurstomerId: Integer; 
                              const address: WideString; const detailAddress: WideString; 
                              orderType: Integer; needCars: Integer; CustomerNum: Integer; 
                              UserId: Integer; const Memo: WideString; const tbName: WideString; 
                              OrderId: Integer; const telPhone: WideString; RECORD_ID: Integer); dispid 462;
    procedure ModifyOrderStat(const tbName: WideString; OrderId: Integer; stat: Integer); dispid 463;
    function AddNewCustomer(const CustomerName: WideString; const detailAddress: WideString; 
                            gender: Integer; const telPhone: WideString; OrderNums: Integer; 
                            RoadID: Integer; SmallAddressID: Integer; const Memo: WideString): OleVariant; dispid 464;
    function GetCustomerByTel(const telPhone: WideString): OleVariant; dispid 465;
    procedure AddNewOrderDownCars(OrderId: Integer; DevID: Integer; orderTime: TDateTime); dispid 466;
    procedure AddNewGrabOkCars(OrderId: Integer; DevID: Integer; orderTime: TDateTime); dispid 467;
    procedure AddNewHaveGrabedCars(OrderId: Integer; DevID: Integer; orderTime: TDateTime); dispid 468;
    function QueryCarHitchList(const devIdAny: WideString; beginTime: TDateTime; endTime: TDateTime): OleVariant; dispid 469;
    function HitchStat(devIdArryay: OleVariant; beginTime: TDateTime; endTime: TDateTime): OleVariant; dispid 470;
    function CarMusterCancelStatistics(beginTime: TDateTime; endTime: TDateTime): OleVariant; dispid 471;
    function CarMusterOkStatistics(beginTime: TDateTime; endTime: TDateTime): OleVariant; dispid 472;
    function CarMusterStatistics(beginTime: TDateTime; endTime: TDateTime): OleVariant; dispid 473;
    function GetNextAccuseID: OleVariant; dispid 474;
    procedure AddNewAccuseLog(const ACCUSE_LOG_ID: WideString; ACCUSE_TYPE: Integer; 
                              ACCUSE_TIME: TDateTime; const ACCUSE_TELEPHONE: WideString; 
                              const ACCUSE_CONTENT: WideString; const Car_No: WideString; 
                              const CUSTOMER_NAME: WideString; const CUSTOMER_ADDRESS: WideString; 
                              const CUSTOMER_TELEPHONE: WideString; 
                              const CUSTOMER_MEMO: WideString; CASE_HAPPEN_TIME: TDateTime; 
                              const CASE_ADDRESS: WideString; const TICKET_NO: WideString; 
                              const CHECK_RESULT: WideString; const DEAL_DEPARTMENT: WideString; 
                              const DEAL_MAN: WideString; const DEAL_MAN_TELE: WideString; 
                              const DEAL_RESULT: WideString; DEAL_TIME: TDateTime; 
                              DEAL_STATE: Integer; RECORD_ID: Integer; gender: Integer); dispid 475;
    procedure UpdateAccuseLog(const ACCUSE_LOG_ID: WideString; ACCUSE_TYPE: Integer; 
                              ACCUSE_TIME: TDateTime; CurstomerId: Integer; Car_Id: Integer; 
                              CASE_HAPPEN_TIME: TDateTime; const CASE_ADDRESS: WideString; 
                              const TICKET_NO: WideString; const CHECK_RESULT: WideString; 
                              const DEAL_DEPARTMENT: WideString; const DEAL_MAN: WideString; 
                              const DEAL_MAN_TELE: WideString; const DEAL_RESULT: WideString; 
                              DEAL_TIME: TDateTime; DEAL_STATE: Integer; RECORD_ID: Integer; 
                              const ACCUSE_CONTENT: WideString); dispid 476;
    function AddCenterCancelOrderReason(const ReasonName: WideString; const Memo: WideString): OleVariant; dispid 477;
    procedure UpdateCenterCancelOrderReason(ARID: Integer; const ReasonName: WideString; 
                                            const Memo: WideString); dispid 478;
    procedure DeleteCenterCancelOrderReason(ARID: Integer); dispid 479;
    function QueryCenterCancelOrderReason: OleVariant; dispid 480;
    function GetDealDepartment: OleVariant; dispid 481;
    function GetDealMan: OleVariant; dispid 482;
    function GetFirstAccuseLog: OleVariant; dispid 483;
    function GetLastAccuseLog: OleVariant; dispid 484;
    function GetNextAccuseLog(const ALogID: WideString): OleVariant; dispid 485;
    function GetPriorAccuseLog(const ALogID: WideString): OleVariant; dispid 486;
    function QueryAccuseList(beginTime: TDateTime; endTime: TDateTime): OleVariant; dispid 487;
    function QueryOrderList(const telPhone: WideString; beginTime: TDateTime; endTime: TDateTime; 
                            stat: Integer): OleVariant; dispid 488;
    function AddnewCallInt(CALLIN_START_TIME: TDateTime; CALLIN_END_TIME: TDateTime; 
                           CALLIN_EXT_CHANNEL: Integer; CALLIN_USER_CHANNEL: Integer; 
                           const CALLIN_RECORD_FILE: WideString; const CALLIN_TELEPHONE: WideString): OleVariant; dispid 489;
    procedure DeleteCallInt(ACallinLogId: Integer); dispid 490;
    function QueryCallIntById(ACallinLogId: Integer): OleVariant; dispid 491;
    function AddNewCallInLog(CALLIN_START_TIME: TDateTime; CALLIN_END_TIME: TDateTime; 
                             CALLIN_EXT_CHANNEL: Integer; CALLIN_USER_CHANNEL: Integer; 
                             const CALLIN_RECORD_FILE: WideString; 
                             const CALLIN_TELEPHONE: WideString): OleVariant; dispid 492;
    procedure DeleteCallInLog(ACallinLogId: Integer); dispid 493;
    function QueryCallInLogById(ACallinLogId: Integer): OleVariant; dispid 494;
    procedure UpdateCallInLogEndTime(CallInLogId: Integer; CALLIN_END_TIME: TDateTime); dispid 495;
    procedure UpdateCallInLog(CallInLogId: Integer; CallinUserChannel: Integer; 
                              const CallinRecordFile: WideString); dispid 496;
    function QueryRoadList: OleVariant; dispid 497;
    function QueryRoadBuilding: OleVariant; dispid 498;
    function QueryRoadBuildingByRoadId(ARoadID: Integer): OleVariant; dispid 499;
    function StatisticTelNumsByUsers(beginTime: TDateTime; endTime: TDateTime): OleVariant; dispid 500;
    function getMonthStaticsTelNums(beginTime: TDateTime; endTime: TDateTime): OleVariant; dispid 501;
    function DevGrabOrderStatics(beginTime: TDateTime; endTime: TDateTime): OleVariant; dispid 502;
    procedure ModifyGrabOkOrderStat(OrderId: Integer; DevID: Integer; stat: Integer; 
                                    orderTime: TDateTime; RasonID: Integer); dispid 503;
    function AddNewOrder(BespeakDateTime: TDateTime; CurstomerId: Integer; 
                         const telPhone: WideString; const address: WideString; 
                         const detailAddress: WideString; orderType: Integer; needCars: Integer; 
                         CustomerNum: Integer; UserId: Integer; const Memo: WideString; 
                         RecordId: Integer; IsChange: Integer): OleVariant; dispid 504;
    procedure AddNewChaseCarRecord(const DevID: WideString; ChaseTime: TDateTime; OrderId: Integer; 
                                   AUserID: Integer; const telPhone: WideString); dispid 505;
    function CallClient_Login(const AUserName: WideString; const AUserPass: WideString; 
                              AnAddParam: Integer): OleVariant; dispid 506;
    procedure ModifyCallInLogStat(CALLIN_LOG_ID: Integer; stat: Integer); dispid 507;
    function StatisticCallInByUsers(beginTime: TDateTime; endTime: TDateTime): OleVariant; dispid 508;
    function QueryGroupIds: OleVariant; dispid 509;
    procedure ModifyGroupIds(groupIds: OleVariant); dispid 510;
    function CallClient_QueryDevList: OleVariant; dispid 511;
    function CallClient_CarList: OleVariant; dispid 512;
    function QueryChaseCarRecords(beginTime: TDateTime; endTime: TDateTime): OleVariant; dispid 513;
    function CallinStatics(const beginTime: WideString; const endTime: WideString): OleVariant; dispid 514;
    function ChaseCarStatics(const beginTime: WideString; const endTime: WideString): OleVariant; dispid 515;
    function CarChasedStatics(begTime: TDateTime; endTime: TDateTime): OleVariant; dispid 516;
    function AccuseStatics(const beginTime: WideString; const endTime: WideString): OleVariant; dispid 517;
    function AddNew_AccuseLog(const ACCUSE_LOG_ID: WideString; ACCUSE_TYPE: Integer; 
                              ACCUSE_TIME: TDateTime; CurstomerId: Integer; Car_Id: Integer; 
                              CASE_HAPPEN_TIME: TDateTime; const CASE_ADDRESS: WideString; 
                              const TICKET_NO: WideString; const CHECK_RESULT: WideString; 
                              const DEAL_DEPARTMENT: WideString; const DEAL_MAN: WideString; 
                              const DEAL_MAN_TELE: WideString; const DEAL_RESULT: WideString; 
                              DEAL_TIME: TDateTime; DEAL_STATE: Integer; RECORD_ID: Integer; 
                              UserId: Integer; const ACCUSE_CONTENT: WideString): OleVariant; dispid 518;
    function QueryCallIn_Log(beginTime: TDateTime; endTime: TDateTime): OleVariant; dispid 519;
    function QueryOrderByOrderId(OrderId: Integer): OleVariant; dispid 520;
    function QueryCustomerById(AId: Integer): OleVariant; dispid 521;
    function QueryOkOrderByDevId(const AId: WideString): OleVariant; dispid 522;
    function QueryGrabOrderByOrderId(AOrderID: Integer): OleVariant; dispid 523;
    function QueryGrabOkOrderByOrderId(AId: Integer): OleVariant; dispid 524;
    function QueryOrderDownCars(AOrderID: Integer): OleVariant; dispid 525;
    procedure AddNewChangeOrder(oldOrderId: Integer; oldOrderTime: TDateTime; newOrderId: Integer; 
                                newOrderTime: TDateTime; CallCenterReasonId: Integer; 
                                DriverReasonId: Integer); dispid 526;
    function QueryNoDealOrder: OleVariant; dispid 527;
    function QueryCancelMenuByCancelId(AId: Integer): OleVariant; dispid 528;
    procedure UpdateCallInStat(ACallinLogId: Integer; AStat: Integer); dispid 529;
    procedure AddNewCustomerCancelOrders(const telPhone: WideString; CustomerId: Integer; 
                                         OrderId: Integer; const Memo: WideString); dispid 530;
    function QueryCustomerCancelOrderList(beginTime: TDateTime; endTime: TDateTime): OleVariant; dispid 531;
    function QueryCustomer: OleVariant; dispid 532;
    function QueryOldOrderIDByNewOrderId(ANewOrderId: Integer): OleVariant; dispid 533;
    function QueryCmdLogs(ABEXEC_TIME: TDateTime; AEEXEC_TIME: TDateTime): OleVariant; dispid 534;
    function AddNewAdInfo(const adMemo: WideString; beginTime: TDateTime; endTime: TDateTime; 
                          const CustomerName: WideString; const linkName: WideString; 
                          const tel: WideString; const Memo: WideString): OleVariant; dispid 535;
    procedure ModifyAdInfo(AId: Integer; const adMemo: WideString; beginTime: TDateTime; 
                           endTime: TDateTime; const CustomerName: WideString; 
                           const linkName: WideString; const tel: WideString; const Memo: WideString); dispid 536;
    procedure DeleteAdInfo(AId: Integer); dispid 537;
    function QueryAdInfo: OleVariant; dispid 538;
    function AddNewDevAd(const DevID: WideString; AdId: Integer): OleVariant; dispid 539;
    function QueryAdByGroupId(AGroupID: Integer): OleVariant; dispid 540;
    function QueryAdInfoOverTime(ADays: Integer): OleVariant; dispid 541;
    function AddNewBeforeScreen(const bsMemo: WideString): OleVariant; dispid 542;
    procedure ModifyBeforeScreen(AId: Integer; const bfMemo: WideString); dispid 543;
    procedure DeleteBeforeScreen(AId: Integer); dispid 544;
    function QueryBeforeScreen: OleVariant; dispid 545;
    function AddBsByDev(bsId: Integer; const DevID: WideString): OleVariant; dispid 546;
    procedure DeleteBsByDev(ABsId: Integer; const ADevID: WideString); dispid 547;
    function QueryBsByDev(const ADevID: WideString): OleVariant; dispid 548;
    procedure DeleteAdByDevIdADID(const DevID: WideString; AId: Integer); dispid 549;
    procedure DeleteADByDev(const DevID: WideString); dispid 550;
    function QueryADByDevId(const ADevID: WideString): OleVariant; dispid 551;
    function QueryDevByADId(AdId: Integer): OleVariant; dispid 552;
    function AddNewStationType(const AStationType: WideString): OleVariant; dispid 553;
    procedure DeleteStationType(AId: Integer); dispid 554;
    procedure ModifyStationType(AId: Integer; const AStationType: WideString); dispid 555;
    function QueryStationType: OleVariant; dispid 556;
    function AddStationInfo(const ASationName: WideString; const AMemo: WideString): OleVariant; dispid 557;
    procedure DeleteStation(AId: Integer); dispid 558;
    procedure ModifyStation(AId: Integer; const AStationName: WideString; const AMemo: WideString); dispid 559;
    function QueryStation: OleVariant; dispid 560;
    function AddInStaticon(StationId: Integer; PlatType_Id: Integer; PLATDirect: Integer; 
                           InStationDistance: Integer; OutStationDistance: Integer; 
                           INGPSLanti: Double; INGPSLongi: Double; OUTGPSLanti: Double; 
                           OUTGPSLongi: Double; const InSoundInfo: WideString; 
                           const OutSoundInfo: WideString; const DSound: WideString; 
                           const Memo: WideString; const StationBrank: WideString): OleVariant; dispid 561;
    procedure ModifyInStation(AId: Integer; StationId: Integer; PlatType_Id: Integer; 
                              PLATDirect: Integer; InStationDistance: Integer; 
                              OutStationDistance: Integer; INGPSLanti: Double; INGPSLongi: Double; 
                              OUTGPSLanti: Double; OUTGPSLongi: Double; 
                              const InSoundInfo: WideString; const OutSoundInfo: WideString; 
                              const DSound: WideString; const Memo: WideString; 
                              const StationBrank: WideString); dispid 562;
    procedure DeleteInStation(AId: Integer); dispid 563;
    function QueryInStation: OleVariant; dispid 564;
    function AddLine(const LineName: WideString; const Memo: WideString): OleVariant; dispid 565;
    procedure ModifyLine(AId: Integer; const ALineName: WideString; const AMemo: WideString); dispid 566;
    procedure DeleteLine(AId: Integer); dispid 567;
    function QueryLines: OleVariant; dispid 568;
    function AddLineStation(ALineId: Integer; AInStationID: Integer; ALineSatationNo: Integer; 
                            AOnOrDown: Integer; ALineStationTrueNo: Integer): OleVariant; dispid 569;
    procedure ModifyLineStation(AId: Integer; ALineId: Integer; AInStationID: Integer; 
                                ALineSatationNo: Integer); dispid 570;
    procedure DeleteLineStation(ALineId: Integer); dispid 571;
    function QueryLineStation(ALineId: Integer): OleVariant; dispid 572;
    function AddDevLine(const DevID: WideString; LineID: Integer): OleVariant; dispid 573;
    function QueryStationTypeList: OleVariant; dispid 574;
    function QueryBusLineDevs(ALineId: Integer): OleVariant; dispid 575;
    function AddNewUserOpenBusLines(AUserID: Integer; ABusLineID: Integer): OleVariant; dispid 576;
    function QueryUserOpenBusLines(AUserID: Integer): OleVariant; dispid 577;
    procedure DeleteUserOpenBusLines(AUserID: Integer); dispid 578;
    function AddNewBusFrequency(const DevIDStr: WideString; const SignTime: WideString; 
                                StationId: Integer; const StartTime: WideString; BusLineID: Integer): OleVariant; dispid 579;
    procedure DeleteBusFrequency(const ADevIDStr: WideString); dispid 580;
    function QueryBusFrequency(ALineId: Integer; const ADevIDStr: WideString): OleVariant; dispid 581;
    procedure AddNewDevRunInfo(const DevIDStr: WideString; const StartTime: WideString; 
                               const endTime: WideString; RunTime: Integer); dispid 582;
    procedure AddNewDriverRunInfo(const DevIDStr: WideString; const DriverNo: WideString; 
                                  InStationID: Integer; StartinTime: TDateTime; 
                                  SartoutTime: TDateTime; EndInTime: TDateTime; 
                                  EndOutTime: TDateTime; AType: Integer; PreEndOutTime: TDateTime; 
                                  EndStationId: Integer); dispid 583;
    function QueryDriverRunInfo(const ADriverNo: WideString; const AStartTime: WideString; 
                                const AEndTime: WideString; const ACarNo: WideString; 
                                const ALineName: WideString): OleVariant; dispid 584;
    procedure AddNewOtherSituation(const DevIDStr: WideString; const DriverNo: WideString; 
                                   const StartTime: WideString; const endTime: WideString; 
                                   Course: Double; const OtherTypeName: WideString); dispid 585;
    function QueryOtherSituation(const ACarNo: WideString; const AStartTime: WideString; 
                                 const AEndTime: WideString; const AType: WideString): OleVariant; dispid 586;
    procedure ChangeDevBusLine(const DevIDStr: WideString; oldLine: Integer; newLine: Integer; 
                               const StartTime: WideString; const endTime: WideString; 
                               const operTime: WideString); dispid 587;
    function QueryChangeDevBusLine(const ADevID: WideString; const AStartTime: WideString; 
                                   const AEndTime: WideString): OleVariant; dispid 588;
    function AddNewArea(AreaNo: Integer; const AreaName: WideString; AreaType: Integer; 
                        AreaPointCnt: Integer; OverSpeed: Integer): OleVariant; dispid 589;
    function QuerAreaList: OleVariant; dispid 590;
    procedure DeleteArea(AreaID: Integer); dispid 591;
    function AddNewAreaInfo(AreaID: Integer; X: Integer; Y: Integer): OleVariant; dispid 592;
    procedure DeleteAreaInfo(AAreaID: Integer); dispid 593;
    function QueryAreaInfo(AAreaID: Integer): OleVariant; dispid 594;
    function AddNewDevAreas(const DevID: WideString; AreaID: Integer): OleVariant; dispid 595;
    procedure DeleteDevAreas(const DevID: WideString; AreaID: Integer); dispid 596;
    function QueryDevAreas(AAreaID: Integer): OleVariant; dispid 597;
    function QueryOverSpeedInfo(const beginTime: WideString; const endTime: WideString; 
                                const DevIDStr: WideString; group_Id: Integer): OleVariant; dispid 598;
    function QueryStopTime(const DevIDStr: WideString; const beginTime: WideString; 
                           const endTime: WideString): OleVariant; dispid 599;
    function QueryStopInfo(AStopId: Integer): OleVariant; dispid 600;
    function AddNewFactorySite(UserId: Integer; const name: WideString; TypeID: Integer; 
                               Longtiude: Integer; Latitude: Integer; leftTopLongtiude: Integer; 
                               leftTopLatitude: Integer; rightBootomLongtiude: Integer; 
                               rightBootomLatitude: Integer; Scope: Integer; FontSize: Integer; 
                               const FontName: WideString; FontColor: Integer; 
                               const Memo: WideString): OleVariant; dispid 601;
    function QueryFactorySite: OleVariant; dispid 602;
    procedure DeleteFactorySite(AId: Integer); dispid 603;
    function QueryCarInOrOutSite(const beginTime: WideString; const endTime: WideString): OleVariant; dispid 608;
    function TaxiMetaMoneryMonthTj(const Car_No: WideString; const M: WideString; group_Id: Integer): OleVariant; dispid 604;
    function StatTaxRunDataByDay(const fromDate: WideString; const toDate: WideString; 
                                 group_Id: Integer): OleVariant; dispid 606;
    function TaxiMetaMoneryMonthTjChat(const M: WideString; group_Id: Integer): OleVariant; dispid 607;
    function statRunDataMoneryByDayChat(const AFromDate: WideString; const AEndDate: WideString; 
                                        group_Id: Integer): OleVariant; dispid 609;
    function QueryTaxiTj(const ARq: WideString; AGroupID: Integer): OleVariant; dispid 610;
    function QueryDevPostion(const DevID: WideString; const beginTime: WideString; 
                             const endTime: WideString; beginLat: Integer; beginLong: Integer; 
                             endLat: Integer; endLong: Integer): OleVariant; dispid 611;
    function AddNewLedAd(const DataType: WideString; DisSpeed: Integer; const InType: WideString; 
                         const ExitType: WideString; const X: WideString; const Y: WideString; 
                         StopTime: Integer; const Font: WideString; IsDisTime: Integer; 
                         const Extend: WideString; const LedMemo: WideString; 
                         const RunTime: WideString; const endTime: WideString; 
                         const CusTerm: WideString; const custermPer: WideString; 
                         const custermTel: WideString; const Memo: WideString): OleVariant; dispid 612;
    procedure ModifyLedAd(id: Integer; const DataType: WideString; DisSpeed: Integer; 
                          const InType: WideString; const ExitType: WideString; 
                          const X: WideString; const Y: WideString; StopTime: Integer; 
                          const Font: WideString; IsDisTime: Integer; const Extend: WideString; 
                          const LedMemo: WideString; const RunTime: WideString; 
                          const endTime: WideString; const CusTerm: WideString; 
                          const custermPer: WideString; const custermTel: WideString; 
                          const Memo: WideString); dispid 613;
    procedure DeleteLedAd(AId: Integer); dispid 614;
    function AddLedDev(LedID: Integer; const DevID: WideString; LedNo: Integer): OleVariant; dispid 615;
    procedure DeleteLedDev(LedID: Integer; const DevID: WideString; LedNo: Integer); dispid 616;
    function QueryAdByID(LedID: Integer; const DevID: WideString): OleVariant; dispid 617;
    function QueryLedAd(LedID: Integer): OleVariant; dispid 618;
    function QueryGpsHourDis(const carNo: WideString; const beginTime: WideString; 
                             const endTime: WideString; group_Id: Integer): OleVariant; dispid 619;
    procedure SetDevOil(const DevID: WideString; oil: Double); dispid 620;
    function QueryDevOil(const DevID: WideString): OleVariant; dispid 621;
    function SetLineLedHint(LineID: Integer; OnOrDown: Integer; L1: Integer; L2: Integer; 
                            L3: Integer; L4: Integer; L5: Integer; L6: Integer; L7: Integer; 
                            L8: Integer; L9: Integer; L10: Integer; L11: Integer; L12: Integer; 
                            L13: Integer; L14: Integer; L15: Integer; L16: Integer; L17: Integer; 
                            L18: Integer; L19: Integer; L20: Integer; L21: Integer; L22: Integer; 
                            L23: Integer; L24: Integer; L25: Integer; L26: Integer; L27: Integer; 
                            L28: Integer; L29: Integer; L30: Integer; L31: Integer; L32: Integer; 
                            L33: Integer; L34: Integer; L35: Integer; L36: Integer; L37: Integer; 
                            L38: Integer; L39: Integer; L40: Integer; L41: Integer; L42: Integer; 
                            L43: Integer; L44: Integer; L45: Integer; L46: Integer; L47: Integer; 
                            L48: Integer): OleVariant; dispid 622;
    function QueryLineLed(LineID: Integer; OnOrDown: Integer): OleVariant; dispid 623;
    function QueryStationByLine(InStationID: Integer): OleVariant; dispid 624;
    function QueryInStationOnLineMinAndMaxNo(LineID: Integer; OnOrDown: Integer): OleVariant; dispid 625;
    function QueryOverSpeed(const carNo: WideString; const AFromDate: WideString; 
                            const AEndDate: WideString; AGroupID: Integer): OleVariant; dispid 626;
    function QueryOverSpeedSec(const carNo: WideString; const AFromDate: WideString; 
                               const AEndDate: WideString; AGroupID: Integer): OleVariant; dispid 627;
    function StatTaxiRunDataByMonth(const AFromDate: WideString; const AEndDate: WideString; 
                                    groupId: Integer): OleVariant; dispid 605;
    function QuerryCarCarrayOffXslc(const ADevS: WideString; AFromTime: TDateTime; 
                                    AToTime: TDateTime; AMilType: Integer): OleVariant; dispid 414;
    function QuerryCarDayXslc(const ADevS: WideString; AFromTime: TDateTime; AToTime: TDateTime): OleVariant; dispid 628;
    function QuerryCarMonthXslc(const ADevS: WideString; const Ayf: WideString): OleVariant; dispid 629;
    function AddNewArea_New(const AreaName: WideString; IsWarn: Integer; OverSpeed: Integer; 
                            IdlSpeed: Integer; AreaType: Integer; AreaParLen: Integer; 
                            const AreaPar: WideString; IsVisible: Integer): OleVariant; dispid 630;
    procedure DeleteArea_New(AreaID: Integer); dispid 631;
    function QueryArea_New: OleVariant; dispid 632;
    function AddNewAreaByDev_New(AreaID: Integer; const DevID: WideString): OleVariant; dispid 633;
    function QueryAreaByDev_New(const DevID: WideString; AreaID: Integer): OleVariant; dispid 634;
    procedure DeleteAreaByDev_New(const DevID: WideString; AreaID: Integer); dispid 635;
    procedure ModifyArea_New(const AreaName: WideString; IsWarn: Integer; OverSpeed: Integer; 
                             IdlSpeed: Integer; AreaType: Integer; AreaParLen: Integer; 
                             const AreaPar: WideString; AreaID: Integer; IsVisible: Integer); dispid 636;
    function TjCarXslcByMonth(const carNo: WideString; const M: WideString; groupId: Integer): OleVariant; dispid 637;
    function QueryAreaWarn(const carNo: WideString; const beginwarnTime: WideString; 
                           const endWarnTime: WideString; group_Id: Integer; WarnType: Integer): OleVariant; dispid 638;
    function QueryOtherSms(const carNo: WideString; group_Id: Integer; 
                           const beginRecTime: WideString; const endRecTime: WideString): OleVariant; dispid 639;
    function QueryRunDataCount_CS(const ACarNo: WideString; const AFrmDate: WideString; 
                                  const AToDate: WideString; const TradType: WideString): OleVariant; dispid 640;
    function QueryRunDatas_CS(const ACarNo: WideString; const AFromDate: WideString; 
                              const AToDate: WideString; AStartIndex: Integer; AGetCount: Integer; 
                              const TradType: WideString; out ARunData: OleVariant): OleVariant; dispid 641;
    function TjAreaWary(group_Id: Integer; wartype: Integer; const tjTime_Start: WideString; 
                        const tjTime_End: WideString): OleVariant; dispid 642;
    function TjOverSpeed(const beginTime: WideString; const endTime: WideString; Car_Id: Integer; 
                         group_Id: Integer): OleVariant; dispid 643;
    function QueryEmergencyAlarm(const beginTime: WideString; const endTime: WideString; 
                                 Car_Id: Integer; group_Id: Integer): OleVariant; dispid 644;
    function QueryAreaByDevs_New(const ADevIDs: WideString): OleVariant; dispid 645;
    function QueryDriverFatigueRecord(const beginTime: WideString; const endTime: WideString; 
                                      const DevID: WideString; GrpId: Integer): OleVariant; dispid 646;
    function QueryGrpDevs(UserId: Integer): OleVariant; dispid 647;
    function QueryDevMonthRunInfo(const DevIDStr: WideString; const Yf: WideString; 
                                  OverSpeedNum: Integer): OleVariant; dispid 648;
    function AddNewCompany(const companyNo: WideString; const companyName: WideString; 
                           const Memo: WideString): OleVariant; dispid 649;
    procedure ModifyCompany(AId: Integer; const companyNo: WideString; 
                            const companyName: WideString; const Memo: WideString); dispid 650;
    procedure DeleteCompany(AId: Integer); dispid 651;
    function QueryCompany(const companyNo: WideString; const companyName: WideString): OleVariant; dispid 652;
    function AddNewBuilding(const buildSiteNo: WideString; const buildSiteName: WideString; 
                            companyId: Integer; const siteName: WideString; 
                            const siteTel: WideString; const salesman: WideString; 
                            const salemanTel: WideString; AreaType: Integer; AreaParLen: Integer; 
                            const AreaPar: WideString; IsVisible: Integer; const Memo: WideString; 
                            const extend1: WideString; const extend2: WideString): OleVariant; dispid 653;
    procedure ModifyBuilding(AId: Integer; const buildSiteNo: WideString; 
                             const buildSiteName: WideString; companyId: Integer; 
                             const siteName: WideString; const siteTel: WideString; 
                             const salesman: WideString; const salemanTel: WideString; 
                             AreaType: Integer; AreaParLen: Integer; const AreaPar: WideString; 
                             IsVisible: Integer; const Memo: WideString; const extend1: WideString; 
                             const extend2: WideString); dispid 654;
    procedure DeleteBuilding(AId: Integer); dispid 655;
    function QueryBuilding(const buildSiteName: WideString): OleVariant; dispid 656;
    function AddNewProTask(sendStatus: Integer; status: Integer; const createTime: WideString; 
                           factoryId: Integer; projectId: Integer; destineNum: Single; 
                           const bCarNo: WideString; const tab: WideString; 
                           const constructPart: WideString; const taLudu: WideString; 
                           const salename: WideString; const destineTime: WideString; 
                           const extend1: WideString; const extend2: WideString): OleVariant; dispid 657;
    procedure ModifyProTask(AId: Integer; sendStatus: Integer; status: Integer; 
                            const createTime: WideString; factoryId: Integer; buildingId: Integer; 
                            destineNum: Single; const bCarNo: WideString; const tab: WideString; 
                            const constructPart: WideString; const taLudu: WideString; 
                            const salename: WideString; const destineTime: WideString; 
                            const extend1: WideString; const extend2: WideString); dispid 658;
    procedure DleteProTask(taskId: Integer); dispid 659;
    function QueryProTask(const createTime: WideString; factoryId: Integer; buildingId: Integer; 
                          status: Integer; sendStatus: Integer): OleVariant; dispid 660;
    function AddNewFact(const factoryNo: WideString; const factoryName: WideString; 
                        const factoryTel: WideString; const linkName: WideString; 
                        AreaType: Integer; AreaParLen: Integer; const AreaPar: WideString; 
                        IsVisible: Integer; const extend1: WideString; const extend2: WideString): OleVariant; dispid 661;
    procedure ModifyFact(AId: Integer; const factoryNo: WideString; const factoryName: WideString; 
                         const factoryTel: WideString; const linkName: WideString; 
                         AreaType: Integer; AreaParLen: Integer; const AreaPar: WideString; 
                         IsVisible: Integer; const extend1: WideString; const extend2: WideString); dispid 662;
    procedure DeleteFact(AId: Integer); dispid 663;
    function AddAttemper(attemperNo: Integer; taskId: Integer; const DriverNo: WideString; 
                         const carNo: WideString; eachCube: Single; const StartTime: WideString; 
                         const arriveTime: WideString; const unloadStartTime: WideString; 
                         const unloadEndTime: WideString; const backFactoryTime: WideString; 
                         totalCube: Single; const Memo: WideString; const extend1: WideString; 
                         const extend2: WideString): OleVariant; dispid 664;
    function QueryAttemper(const carNo: WideString; finishStatus: Integer): OleVariant; dispid 665;
    function QueryFact(const factoryNo: WideString): OleVariant; dispid 666;
    procedure ModifyAttemper(AId: Integer; attemperNo: Integer; taskId: Integer; 
                             const DriverNo: WideString; const carNo: WideString; eachCube: Single; 
                             const StartTime: WideString; const arriveTime: WideString; 
                             const unloadStartTime: WideString; const unloadEndTime: WideString; 
                             const backFactoryTime: WideString; totalCube: Single; 
                             const Memo: WideString; const extend1: WideString; 
                             const extend2: WideString); dispid 667;
    function QueryAttemperByTaskId(taskId: Integer): OleVariant; dispid 668;
    procedure DeleteAttemper(attemperId: Integer); dispid 669;
    procedure ModifyProTaskDoneStatus(status: Integer; taskId: Integer); dispid 670;
    function QueryOverSpeedInfo1(const beginTime: WideString; const endTime: WideString; 
                                 const DevIDStr: WideString; group_Id: Integer; 
                                 const group_paranet: WideString): OleVariant; dispid 671;
    function QueryEmergencyAlarm1(const beginTime: WideString; const endTime: WideString; 
                                  Car_Id: Integer; group_Id: Integer; 
                                  const group_paranet: WideString): OleVariant; dispid 672;
    procedure ModifyAttemperInfo(AId: Integer; attemperNo: Integer; taskId: Integer; 
                                 eachCube: Single; const StartTime: WideString; 
                                 const arriveTime: WideString; const unloadStartTime: WideString; 
                                 const unloadEndTime: WideString; 
                                 const backFactoryTime: WideString; const Memo: WideString); dispid 673;
    function QueryAttemperCarInfo(taskId: Integer; const DriverNo: WideString; 
                                  const DevIDStr: WideString): OleVariant; dispid 674;
    function QueryDevGpsRunInfo(const DevIDStr: WideString; AStartTime: TDateTime; 
                                AEndTime: TDateTime): OleVariant; dispid 675;
    function QueryStopCarOverTImeAlarm(const DevIDStr: WideString; const start_Time: WideString; 
                                       const end_Time: WideString; groupId: Integer; 
                                       const groupParanet: WideString): OleVariant; dispid 676;
    function QueryDevOilHeight(const DevIDStr: WideString; const StartTime: WideString; 
                               const endTime: WideString): OleVariant; dispid 677;
    function QueryOverSpeedInfo_Condition(const beginTime: WideString; const endTime: WideString; 
                                          const DevIDStr: WideString; group_Id: Integer; 
                                          const group_paranet: WideString; 
                                          const conditionStr: WideString): OleVariant; dispid 678;
    function TjOverSpeed_Condition(const beginTime: WideString; const endTime: WideString; 
                                   Car_Id: Integer; group_Id: Integer; 
                                   const group_SonListStr: WideString; 
                                   const conditionStr: WideString): OleVariant; dispid 679;
    function QueryHistoryGpsData(ADevID: Integer; AFromTime: TDateTime; AToTime: TDateTime; 
                                 AStartIndex: Integer; AGetCount: Integer): OleVariant; dispid 680;
    function AS_ApplyUpdates(const ProviderName: WideString; Delta: OleVariant; MaxErrors: Integer; 
                             out ErrorCount: Integer; var OwnerData: OleVariant): OleVariant; dispid 20000000;
    function AS_GetRecords(const ProviderName: WideString; Count: Integer; out RecsOut: Integer; 
                           Options: Integer; const CommandText: WideString; var Params: OleVariant; 
                           var OwnerData: OleVariant): OleVariant; dispid 20000001;
    function AS_DataRequest(const ProviderName: WideString; Data: OleVariant): OleVariant; dispid 20000002;
    function AS_GetProviderNames: OleVariant; dispid 20000003;
    function AS_GetParams(const ProviderName: WideString; var OwnerData: OleVariant): OleVariant; dispid 20000004;
    function AS_RowRequest(const ProviderName: WideString; Row: OleVariant; RequestType: Integer; 
                           var OwnerData: OleVariant): OleVariant; dispid 20000005;
    procedure AS_Execute(const ProviderName: WideString; const CommandText: WideString; 
                         var Params: OleVariant; var OwnerData: OleVariant); dispid 20000006;
  end;

// *********************************************************************//
// The Class CoBusiness provides a Create and CreateRemote method to          
// create instances of the default interface IBusiness exposed by              
// the CoClass Business. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBusiness = class
    class function Create: IBusiness;
    class function CreateRemote(const MachineName: string): IBusiness;
  end;

implementation

uses ComObj;

class function CoBusiness.Create: IBusiness;
begin
  Result := CreateComObject(CLASS_Business) as IBusiness;
end;

class function CoBusiness.CreateRemote(const MachineName: string): IBusiness;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Business) as IBusiness;
end;

end.
